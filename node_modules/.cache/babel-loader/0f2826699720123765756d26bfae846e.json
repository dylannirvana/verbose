{"ast":null,"code":"var isBrowser = typeof window !== 'undefined';\nvar Packery = isBrowser ? window.Packery || require('packery') : null;\nvar imagesloaded = isBrowser ? require('imagesloaded') : null;\nvar refName = 'packeryContainer';\n\nfunction PackeryComponent(React) {\n  return React.createClass({\n    packery: false,\n    domChildren: [],\n    displayName: 'PackeryComponent',\n    propTypes: {\n      disableImagesLoaded: React.PropTypes.bool,\n      options: React.PropTypes.object\n    },\n    getDefaultProps: function getDefaultProps() {\n      return {\n        disableImagesLoaded: false,\n        options: {},\n        className: '',\n        elementType: 'div'\n      };\n    },\n    initializePackery: function initializePackery(force) {\n      if (!this.packery || force) {\n        this.packery = new Packery(this.refs[refName], this.props.options);\n        this.domChildren = this.getNewDomChildren();\n      }\n    },\n    getNewDomChildren: function getNewDomChildren() {\n      var node = this.refs[refName];\n      var children = this.props.options.itemSelector ? node.querySelectorAll(this.props.options.itemSelector) : node.children;\n      return Array.prototype.slice.call(children);\n    },\n    diffDomChildren: function diffDomChildren() {\n      var oldChildren = this.domChildren.filter(function (element) {\n        /*\n         * take only elements attached to DOM\n         * (aka the parent is the packery container, not null)\n         */\n        return !!element.parentNode;\n      });\n      var newChildren = this.getNewDomChildren();\n      var removed = oldChildren.filter(function (oldChild) {\n        return !~newChildren.indexOf(oldChild);\n      });\n      var domDiff = newChildren.filter(function (newChild) {\n        return !~oldChildren.indexOf(newChild);\n      });\n      var beginningIndex = 0; // get everything added to the beginning of the DOMNode list\n\n      var prepended = domDiff.filter(function (newChild, i) {\n        var prepend = beginningIndex === newChildren.indexOf(newChild);\n\n        if (prepend) {\n          // increase the index\n          beginningIndex++;\n        }\n\n        return prepend;\n      }); // we assume that everything else is appended\n\n      var appended = domDiff.filter(function (el) {\n        return prepended.indexOf(el) === -1;\n      });\n      /*\n       * otherwise we reverse it because so we're going through the list picking off the items that\n       * have been added at the end of the list. this complex logic is preserved in case it needs to be\n       * invoked\n       *\n       * var endingIndex = newChildren.length - 1;\n       *\n       * domDiff.reverse().filter(function(newChild, i){\n       *     var append = endingIndex == newChildren.indexOf(newChild);\n       *\n       *     if (append) {\n       *         endingIndex--;\n       *     }\n       *\n       *     return append;\n       * });\n       */\n      // get everything added to the end of the DOMNode list\n\n      var moved = [];\n\n      if (removed.length === 0) {\n        moved = oldChildren.filter(function (child, index) {\n          return index !== newChildren.indexOf(child);\n        });\n      }\n\n      this.domChildren = newChildren;\n      return {\n        old: oldChildren,\n        new: newChildren,\n        removed: removed,\n        appended: appended,\n        prepended: prepended,\n        moved: moved\n      };\n    },\n    performLayout: function performLayout() {\n      var diff = this.diffDomChildren();\n\n      if (diff.removed.length > 0) {\n        this.packery.remove(diff.removed);\n        this.packery.reloadItems();\n      }\n\n      if (diff.appended.length > 0) {\n        this.packery.appended(diff.appended);\n        this.packery.reloadItems();\n      }\n\n      if (diff.prepended.length > 0) {\n        this.packery.prepended(diff.prepended);\n      }\n\n      if (diff.moved.length > 0) {\n        this.packery.reloadItems();\n      }\n\n      this.packery.layout();\n    },\n    imagesLoaded: function imagesLoaded() {\n      if (this.props.disableImagesLoaded) return;\n      imagesloaded(this.refs[refName], function (instance) {\n        this.packery.layout();\n      }.bind(this));\n    },\n    componentDidMount: function componentDidMount() {\n      this.initializePackery();\n      this.imagesLoaded();\n    },\n    componentDidUpdate: function componentDidUpdate() {\n      this.performLayout();\n      this.imagesLoaded();\n    },\n    componentWillReceiveProps: function componentWillReceiveProps() {\n      this._timer = setTimeout(function () {\n        this.packery.reloadItems();\n        this.isMounted && this.isMounted() && this.forceUpdate();\n      }.bind(this), 0);\n    },\n    componentWillUnmount: function componentWillUnmount() {\n      clearTimeout(this._timer);\n    },\n    render: function render() {\n      return React.createElement(this.props.elementType, {\n        className: this.props.className,\n        ref: refName\n      }, this.props.children);\n    }\n  });\n}\n\nmodule.exports = PackeryComponent;","map":null,"metadata":{},"sourceType":"script"}