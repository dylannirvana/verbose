{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js\";\n\n/*\n* This component represents the Product Grid\n */\nimport React from 'react';\nimport Product from \"./Product\";\nimport { Row, Col, Jumbotron } from 'reactstrap';\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\nimport FileUploader from '../GridControls/FileUploader';\n\nvar ProductGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductGrid, _React$Component);\n\n  function ProductGrid() {\n    _classCallCheck(this, ProductGrid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductGrid).apply(this, arguments));\n  }\n\n  _createClass(ProductGrid, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        id: \"page-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Col, {\n        className: \"product-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, //Loop through the products\n      Object.values(this.props.container.getFilteredProducts()).map(function (product) {\n        return (//Invokes and renders the Product Component\n          React.createElement(Product, {\n            key: product.sku,\n            product: product,\n            container: _this.props.container,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          })\n        );\n      }), //If there are no products uploaded via CSV, display the FileUploader component\n      !this.props.container.gridPopulated() && React.createElement(FileUploader, {\n        container: this.props.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }))));\n    } //Initialize packery on the product filteredProducts and make the Bootstrap cards draggable\n\n  }, {\n    key: \"initPackery\",\n    value: function initPackery() {\n      var component = this;\n      var dragableComponents = [];\n      var packeryInstance = new Packery('.product-grid', {\n        itemSelector: '.grid-item',\n        percentPosition: true\n      }); //Initialize instance of dragable component, which makes the products dragable\n\n      packeryInstance.getItemElements().forEach(function (itemElem) {\n        var draggie = new Draggabilly(itemElem);\n        packeryInstance.bindDraggabillyEvents(draggie);\n        dragableComponents.push(draggie);\n      });\n      component.props.container.setState({\n        packery: packeryInstance,\n        dragableComponents: dragableComponents\n      });\n    } //Destroys existing packery instance\n\n  }, {\n    key: \"destroyPackery\",\n    value: function destroyPackery() {\n      var component = this;\n      var packeryInstance = component.props.container.getState('packery');\n\n      if (packeryInstance) {\n        //Destroy instances of dragable component, which makes the products dragable\n        component.props.container.getState('dragableComponents').forEach(function (draggie) {\n          draggie.destroy();\n        }); //Destroy Packery Instance\n\n        packeryInstance.destroy();\n      }\n\n      component.props.container.setState({\n        packeryRefresh: false,\n        dragableComponents: [],\n        packery: false\n      });\n    } //This function is executed every time this component is updated\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.container.getState('packeryRefresh')) {\n        this.destroyPackery();\n        this.initPackery();\n        this.props.container.setState({\n          'packeryRefresh': false\n        });\n      }\n    }\n  }]);\n\n  return ProductGrid;\n}(React.Component);\n\nexport default ProductGrid;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js"],"names":["React","Product","Row","Col","Jumbotron","Packery","Draggabilly","FileUploader","ProductGrid","Object","values","props","container","getFilteredProducts","map","product","sku","gridPopulated","component","dragableComponents","packeryInstance","itemSelector","percentPosition","getItemElements","forEach","itemElem","draggie","bindDraggabillyEvents","push","setState","packery","getState","destroy","packeryRefresh","destroyPackery","initPackery","Component"],"mappings":"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","sourcesContent":["/*\n* This component represents the Product Grid\n */\n\nimport React from 'react';\nimport Product from \"./Product\";\nimport {\n    Row,\n    Col,\n    Jumbotron\n} from 'reactstrap';\n\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\n\nimport FileUploader from '../GridControls/FileUploader';\n\n\nclass ProductGrid extends React.Component {\n\n    render() {\n\n\n        return (\n            <Jumbotron fluid={true} id={\"page-content\"}>\n                <Row className=\"grid\">\n\n\n                    <Col className=\"product-grid\">\n                        {\n                            //Loop through the products\n                            Object.values(this.props.container.getFilteredProducts()).map(product =>\n                                //Invokes and renders the Product Component\n                                <Product\n                                    key={product.sku}\n                                    product={product}\n                                    container={this.props.container}\n                                />\n                            )\n\n                        }\n                        {\n                            //If there are no products uploaded via CSV, display the FileUploader component\n                            !this.props.container.gridPopulated() &&\n                            <FileUploader container={this.props.container}/>\n                        }\n                    </Col>\n\n                </Row>\n            </Jumbotron>\n        )\n    }\n\n    //Initialize packery on the product filteredProducts and make the Bootstrap cards draggable\n    initPackery() {\n\n        const component = this;\n        let dragableComponents = [];\n\n        var packeryInstance = new Packery('.product-grid', {\n            itemSelector: '.grid-item',\n            percentPosition: true\n        });\n\n        //Initialize instance of dragable component, which makes the products dragable\n        packeryInstance.getItemElements().forEach(function (itemElem) {\n            var draggie = new Draggabilly(itemElem);\n            packeryInstance.bindDraggabillyEvents(draggie);\n            dragableComponents.push(draggie);\n        });\n\n\n\n        component.props.container.setState({\n            packery: packeryInstance,\n            dragableComponents: dragableComponents\n        });\n\n\n    }\n\n    //Destroys existing packery instance\n    destroyPackery() {\n\n        const component = this;\n        const packeryInstance = component.props.container.getState('packery');\n\n        if (packeryInstance) {\n            //Destroy instances of dragable component, which makes the products dragable\n            component.props.container.getState('dragableComponents').forEach(function (draggie) {\n\n                draggie.destroy();\n            });\n\n\n\n            //Destroy Packery Instance\n            packeryInstance.destroy();\n        }\n\n\n        component.props.container.setState({\n            packeryRefresh: false,\n            dragableComponents: [],\n            packery: false\n        })\n\n\n    }\n\n\n    //This function is executed every time this component is updated\n    componentDidUpdate() {\n\n\n        if (this.props.container.getState('packeryRefresh')) {\n\n            this.destroyPackery();\n\n           this.initPackery();\n\n            this.props.container.setState({'packeryRefresh': false})\n\n        }\n\n\n    }\n\n\n}\n\nexport default ProductGrid;\n"]},"metadata":{},"sourceType":"module"}