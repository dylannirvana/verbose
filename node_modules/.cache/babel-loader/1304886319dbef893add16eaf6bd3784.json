{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid.js\";\nimport React, { Component } from 'react';\nimport Papa from 'papaparse'; // NOTE: This component imports the product object and renders it to the grid\n// The grid template iterates through the product object\n// and makes the draggery, packery, and isotope packages available to it\n// The logic for the UI has to be taken up in a separate component\n// That component has to make clear what the logic is as it works with the taxonomy\n// What should it be called? What is purpose of that component?\n// 1. to reorder PARTS of the gridorder using the TAXONOMY rather than the numeric value of the gridorder\n// so only a subset of the products are received\n// by filter, sort, and drag, a neworder is achieved\n// 2. to teach how this is to be achieved. It has to be teachable\n// Stateful component\n\nvar ProductGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProductGrid, _Component);\n\n  function ProductGrid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProductGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProductGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.setState = {\n      itemList: []\n    };\n    return _this;\n  }\n\n  _createClass(ProductGrid, [{\n    key: \"render\",\n    value: function render() {\n      var uploadHandler = function uploadHandler(event) {\n        var inventory = event.target.files[0];\n        Papa.parse(inventory, {\n          header: true,\n          complete: function complete(results) {\n            var items = results.data;\n            console.log(items);\n            this.setState({\n              itemList: items\n            });\n          }\n        });\n      }; // END UploadHandler\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ProductGrid;\n}(Component);\n\nexport default ProductGrid;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid.js"],"names":["React","Component","Papa","ProductGrid","setState","itemList","uploadHandler","event","inventory","target","files","parse","header","complete","results","items","data","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;IACMC,W;;;;;;;;;;;;;;;;;UAQFC,Q,GAAW;AACPC,MAAAA,QAAQ,EAAE;AADH,K;;;;;;6BAIJ;AAEP,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,YAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAlB;AAEAR,QAAAA,IAAI,CAACS,KAAL,CAAWH,SAAX,EAAsB;AACpBI,UAAAA,MAAM,EAAE,IADY;AAEpBC,UAAAA,QAAQ,EAAE,kBAASC,OAAT,EAAkB;AAE1B,gBAAMC,KAAK,GAAGD,OAAO,CAACE,IAAtB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,iBAAKX,QAAL,CAAc;AAAEC,cAAAA,QAAQ,EAAEU;AAAZ,aAAd;AACD;AAPmB,SAAtB;AASD,OAZD,CAFO,CAcL;;;AAEF,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;;;;EAjCuBd,S;;AAoC1B,eAAeE,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport Papa from 'papaparse'\n\n\n// NOTE: This component imports the product object and renders it to the grid\n// The grid template iterates through the product object\n// and makes the draggery, packery, and isotope packages available to it\n\n// The logic for the UI has to be taken up in a separate component\n// That component has to make clear what the logic is as it works with the taxonomy\n// What should it be called? What is purpose of that component?\n\n// 1. to reorder PARTS of the gridorder using the TAXONOMY rather than the numeric value of the gridorder\n// so only a subset of the products are received\n// by filter, sort, and drag, a neworder is achieved\n// 2. to teach how this is to be achieved. It has to be teachable\n\n// Stateful component\nclass ProductGrid extends Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         itemList: []\n    //     }\n    // }\n\n    setState = {\n        itemList: []\n    }\n\n  render() {\n\n    const uploadHandler = (event) => {\n      const inventory = event.target.files[0]\n  \n      Papa.parse(inventory, {\n        header: true,\n        complete: function(results) {\n  \n          const items = results.data;   \n          console.log(items)\n          this.setState({ itemList: items })\n        }\n      })\n    } // END UploadHandler\n    \n    return (\n      <div>\n        { }\n      </div>\n    )\n  }\n}\n\nexport default ProductGrid"]},"metadata":{},"sourceType":"module"}