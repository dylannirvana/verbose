{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js\";\n\n/*\n* This component displays the filter button\n* And also implements the logic to filter the grid, when the filter button is clicked\n */\nimport React from \"react\";\n\nvar Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter(props) {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, props));\n\n    _this.filterGrid = function (event) {\n      var component = _assertThisInitialized(_assertThisInitialized(_this)),\n          feed = Array.from(_this.props.container.getState('feed')),\n          filterLabel = event.target.textContent;\n\n      var activeFilters,\n          filteredGrid = feed; //Update the selected state of the component\n\n      component.state.selected = !component.state.selected;\n\n      if (_this.state.selected) {\n        //If filter button is selected, add it to the list of appliedFilters\n        activeFilters = component.props.container.addFilter(component.props.filterCriteria, filterLabel);\n      } else {\n        //Else, remove the filter from the list of applied filters\n        activeFilters = component.props.container.removeFilter(filterLabel);\n      }\n\n      if (activeFilters.length) {\n        //If any filters have been applied\n        filteredGrid = feed.filter(function (product, index) {\n          //Loop through each product in the product feed\n          return activeFilters.some(function (filter) {\n            //Loop through the applied filters\n            //Check if the product matches atleast one of the the selected filters\n            if (product[filter.criteria] !== undefined && !product[filter.criteria].toLowerCase().indexOf(filter.label)) {\n              //If there is a match, return true and exit the loop\n              return true;\n            } //If there is no match, return false and continue with the loop\n\n\n            return false;\n          });\n        });\n      } //Update thr product grid\n\n\n      _this.props.container.setState({\n        'grid': filteredGrid,\n        'packeryRefresh': true\n      });\n    };\n\n    _this.state = {\n      selected: false // Indicates, if the filter has been selected\n\n    };\n    _this.filterGrid = _this.filterGrid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Filters the grid, based on the filters selected by the user\n\n\n  _createClass(Filter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"button\", {\n        className: \"btn white-button filter-option \" + (this.state.selected ? 'active' : ''),\n        onClick: this.filterGrid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.props.filterLabel);\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\nexport { Filter as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js"],"names":["React","Filter","props","filterGrid","event","component","feed","Array","from","container","getState","filterLabel","target","textContent","activeFilters","filteredGrid","state","selected","addFilter","filterCriteria","removeFilter","length","filter","product","index","some","criteria","undefined","toLowerCase","indexOf","label","setState","bind","Component"],"mappings":";;;;;;;;AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;;IAGqBC,M;;;;;AACjB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAEf,gFAAMA,KAAN;;AAFe,UAanBC,UAbmB,GAaN,UAACC,KAAD,EAAW;AAEpB,UAAMC,SAAS,wDAAf;AAAA,UACIC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAW,MAAKN,KAAL,CAAWO,SAAX,CAAqBC,QAArB,CAA8B,MAA9B,CAAX,CADX;AAAA,UAEIC,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAaC,WAF/B;;AAIA,UAAIC,aAAJ;AAAA,UACIC,YAAY,GAAGT,IADnB,CANoB,CASpB;;AACAD,MAAAA,SAAS,CAACW,KAAV,CAAgBC,QAAhB,GAA2B,CAACZ,SAAS,CAACW,KAAV,CAAgBC,QAA5C;;AAEA,UAAI,MAAKD,KAAL,CAAWC,QAAf,EAAyB;AAAE;AACvBH,QAAAA,aAAa,GAAGT,SAAS,CAACH,KAAV,CAAgBO,SAAhB,CAA0BS,SAA1B,CAAoCb,SAAS,CAACH,KAAV,CAAgBiB,cAApD,EAAoER,WAApE,CAAhB;AACH,OAFD,MAEO;AAAE;AACLG,QAAAA,aAAa,GAAGT,SAAS,CAACH,KAAV,CAAgBO,SAAhB,CAA0BW,YAA1B,CAAuCT,WAAvC,CAAhB;AACH;;AAED,UAAIG,aAAa,CAACO,MAAlB,EAA0B;AAAE;AAExBN,QAAAA,YAAY,GAAGT,IAAI,CAACgB,MAAL,CAAY,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AAAE;AAEnD,iBAAOV,aAAa,CAACW,IAAd,CAAmB,UAAUH,MAAV,EAAkB;AAAE;AAE1C;AACA,gBAAIC,OAAO,CAACD,MAAM,CAACI,QAAR,CAAP,KAA6BC,SAA7B,IAA0C,CAACJ,OAAO,CAACD,MAAM,CAACI,QAAR,CAAP,CAAyBE,WAAzB,GAAuCC,OAAvC,CAA+CP,MAAM,CAACQ,KAAtD,CAA/C,EAA6G;AAEzG;AACA,qBAAO,IAAP;AACH,aAPuC,CASxC;;;AACA,mBAAO,KAAP;AACH,WAXM,CAAP;AAYH,SAdc,CAAf;AAeH,OAnCmB,CAqCpB;;;AACA,YAAK5B,KAAL,CAAWO,SAAX,CAAqBsB,QAArB,CAA8B;AAAC,gBAAQhB,YAAT;AAAuB,0BAAkB;AAAzC,OAA9B;AAGH,KAtDkB;;AAIf,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD,CACO;;AADP,KAAb;AAIA,UAAKd,UAAL,GAAkB,MAAKA,UAAL,CAAgB6B,IAAhB,uDAAlB;AARe;AAUlB,G,CAED;;;;;6BA4CS;AAEL,aACI;AAAQ,QAAA,SAAS,EAAE,qCAAqC,KAAKhB,KAAL,CAAWC,QAAX,GAAsB,QAAtB,GAAiC,EAAtE,CAAnB;AACQ,QAAA,OAAO,EAAE,KAAKd,UADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKD,KAAL,CAAWS,WAFhB,CADJ;AAMH;;;;EAjE+BX,KAAK,CAACiC,S;;SAArBhC,M","sourcesContent":["/*\n* This component displays the filter button\n* And also implements the logic to filter the grid, when the filter button is clicked\n */\n\nimport React from \"react\";\n\n\nexport default class Filter extends React.Component {\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            selected: false // Indicates, if the filter has been selected\n        };\n\n        this.filterGrid = this.filterGrid.bind(this);\n\n    }\n\n    //Filters the grid, based on the filters selected by the user\n    filterGrid = (event) => {\n\n        const component = this,\n            feed = Array.from(this.props.container.getState('feed')),\n            filterLabel = event.target.textContent;\n\n        let activeFilters,\n            filteredGrid = feed;\n\n        //Update the selected state of the component\n        component.state.selected = !component.state.selected\n\n        if (this.state.selected) { //If filter button is selected, add it to the list of appliedFilters\n            activeFilters = component.props.container.addFilter(component.props.filterCriteria, filterLabel);\n        } else { //Else, remove the filter from the list of applied filters\n            activeFilters = component.props.container.removeFilter(filterLabel);\n        }\n\n        if (activeFilters.length) { //If any filters have been applied\n\n            filteredGrid = feed.filter(function (product, index) { //Loop through each product in the product feed\n\n                return activeFilters.some(function (filter) { //Loop through the applied filters\n\n                    //Check if the product matches atleast one of the the selected filters\n                    if (product[filter.criteria] !== undefined && !product[filter.criteria].toLowerCase().indexOf(filter.label)) {\n\n                        //If there is a match, return true and exit the loop\n                        return true;\n                    }\n\n                    //If there is no match, return false and continue with the loop\n                    return false;\n                })\n            })\n        }\n\n        //Update thr product grid\n        this.props.container.setState({'grid': filteredGrid, 'packeryRefresh': true})\n\n\n    }\n\n    render() {\n\n        return (\n            <button className={\"btn white-button filter-option \" + (this.state.selected ? 'active' : '')}\n                    onClick={this.filterGrid}>\n                {this.props.filterLabel}\n            </button>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}