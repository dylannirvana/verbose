{"ast":null,"code":"/*!\n * getSize v1.1.8\n * measure size of elements\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n/*global define: false, exports: false, require: false, module: false */\n(function (window, undefined) {\n  'use strict';\n\n  if (!window) return; // -------------------------- helpers -------------------------- //\n\n  var getComputedStyle = window.getComputedStyle;\n  var getStyle = getComputedStyle ? function (elem) {\n    return getComputedStyle(elem, null);\n  } : function (elem) {\n    return elem.currentStyle;\n  }; // get a number from a string, not a percentage\n\n  function getStyleSize(value) {\n    var num = parseFloat(value); // not a percent like '100%', and a number\n\n    var isValid = value.indexOf('%') === -1 && !isNaN(num);\n    return isValid && num;\n  } // -------------------------- measurements -------------------------- //\n\n\n  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];\n\n  function getZeroSize() {\n    var size = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n\n    for (var i = 0, len = measurements.length; i < len; i++) {\n      var measurement = measurements[i];\n      size[measurement] = 0;\n    }\n\n    return size;\n  }\n\n  function defineGetSize(getStyleProperty) {\n    // -------------------------- box sizing -------------------------- //\n    var boxSizingProp = getStyleProperty('boxSizing');\n    var isBoxSizeOuter;\n    /**\n     * WebKit measures the outer-width on style.width on border-box elems\n     * IE & Firefox measures the inner-width\n     */\n\n    (function () {\n      if (!boxSizingProp) {\n        return;\n      }\n\n      var div = document.createElement('div');\n      div.style.width = '200px';\n      div.style.padding = '1px 2px 3px 4px';\n      div.style.borderStyle = 'solid';\n      div.style.borderWidth = '1px 2px 3px 4px';\n      div.style[boxSizingProp] = 'border-box';\n      var body = document.body || document.documentElement;\n      body.appendChild(div);\n      var style = getStyle(div);\n      isBoxSizeOuter = getStyleSize(style.width) === 200;\n      body.removeChild(div);\n    })(); // -------------------------- getSize -------------------------- //\n\n\n    function getSize(elem) {\n      // use querySeletor if elem is string\n      if (typeof elem === 'string') {\n        elem = document.querySelector(elem);\n      } // do not proceed on non-objects\n\n\n      if (!elem || typeof elem !== 'object' || !elem.nodeType) {\n        return;\n      }\n\n      var style = getStyle(elem); // if hidden, everything is 0\n\n      if (style.display === 'none') {\n        return getZeroSize();\n      }\n\n      var size = {};\n      size.width = elem.offsetWidth;\n      size.height = elem.offsetHeight;\n      var isBorderBox = size.isBorderBox = !!(boxSizingProp && style[boxSizingProp] && style[boxSizingProp] === 'border-box'); // get all measurements\n\n      for (var i = 0, len = measurements.length; i < len; i++) {\n        var measurement = measurements[i];\n        var value = style[measurement];\n        value = mungeNonPixel(elem, value);\n        var num = parseFloat(value); // any 'auto', 'medium' value will be 0\n\n        size[measurement] = !isNaN(num) ? num : 0;\n      }\n\n      var paddingWidth = size.paddingLeft + size.paddingRight;\n      var paddingHeight = size.paddingTop + size.paddingBottom;\n      var marginWidth = size.marginLeft + size.marginRight;\n      var marginHeight = size.marginTop + size.marginBottom;\n      var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n      var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n      var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter; // overwrite width and height if we can get it from style\n\n      var styleWidth = getStyleSize(style.width);\n\n      if (styleWidth !== false) {\n        size.width = styleWidth + ( // add padding and border unless it's already including it\n        isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);\n      }\n\n      var styleHeight = getStyleSize(style.height);\n\n      if (styleHeight !== false) {\n        size.height = styleHeight + ( // add padding and border unless it's already including it\n        isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);\n      }\n\n      size.innerWidth = size.width - (paddingWidth + borderWidth);\n      size.innerHeight = size.height - (paddingHeight + borderHeight);\n      size.outerWidth = size.width + marginWidth;\n      size.outerHeight = size.height + marginHeight;\n      return size;\n    } // IE8 returns percent values, not pixels\n    // taken from jQuery's curCSS\n\n\n    function mungeNonPixel(elem, value) {\n      // IE8 and has percent value\n      if (getComputedStyle || value.indexOf('%') === -1) {\n        return value;\n      }\n\n      var style = elem.style; // Remember the original values\n\n      var left = style.left;\n      var rs = elem.runtimeStyle;\n      var rsLeft = rs && rs.left; // Put in the new values to get a computed value out\n\n      if (rsLeft) {\n        rs.left = elem.currentStyle.left;\n      }\n\n      style.left = value;\n      value = style.pixelLeft; // Revert the changed values\n\n      style.left = left;\n\n      if (rsLeft) {\n        rs.left = rsLeft;\n      }\n\n      return value;\n    }\n\n    return getSize;\n  } // transport\n\n\n  if (typeof exports === 'object') {\n    // CommonJS for Component\n    module.exports = defineGetSize(require('desandro-get-style-property'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD for RequireJS\n    define(['get-style-property/get-style-property'], defineGetSize);\n  } else {\n    // browser global\n    window.getSize = defineGetSize(window.getStyleProperty);\n  }\n})(typeof window !== 'undefined' ? window : null);","map":null,"metadata":{},"sourceType":"script"}