{"ast":null,"code":"/*!\n * imagesLoaded v3.1.8\n * JavaScript is all like \"You images are done yet or what?\"\n * MIT License\n */\n(function (window, factory) {\n  'use strict'; // universal module definition\n\n  /*global define: false, module: false, require: false */\n\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = factory(window, require('wolfy87-eventemitter'), require('eventie'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['eventEmitter/EventEmitter', 'eventie/eventie'], function (EventEmitter, eventie) {\n      return factory(window, EventEmitter, eventie);\n    });\n  } else {\n    // browser global\n    window.imagesLoaded = factory(window, window.EventEmitter, window.eventie);\n  }\n})(window, // --------------------------  factory -------------------------- //\nfunction factory(window, EventEmitter, eventie) {\n  'use strict';\n\n  var $ = window.jQuery;\n  var console = window.console;\n  var hasConsole = typeof console !== 'undefined'; // -------------------------- helpers -------------------------- //\n  // extend objects\n\n  function extend(a, b) {\n    for (var prop in b) {\n      a[prop] = b[prop];\n    }\n\n    return a;\n  }\n\n  var objToString = Object.prototype.toString;\n\n  function isArray(obj) {\n    return objToString.call(obj) === '[object Array]';\n  } // turn element or nodeList into an array\n\n\n  function makeArray(obj) {\n    var ary = [];\n\n    if (isArray(obj)) {\n      // use object if already an array\n      ary = obj;\n    } else if (typeof obj.length === 'number') {\n      // convert nodeList to array\n      for (var i = 0, len = obj.length; i < len; i++) {\n        ary.push(obj[i]);\n      }\n    } else {\n      // array of single index\n      ary.push(obj);\n    }\n\n    return ary;\n  } // -------------------------- imagesLoaded -------------------------- //\n\n  /**\n   * @param {Array, Element, NodeList, String} elem\n   * @param {Object or Function} options - if function, use as callback\n   * @param {Function} onAlways - callback function\n   */\n\n\n  function ImagesLoaded(elem, options, onAlways) {\n    // coerce ImagesLoaded() without new, to be new ImagesLoaded()\n    if (!(this instanceof ImagesLoaded)) {\n      return new ImagesLoaded(elem, options);\n    } // use elem as selector string\n\n\n    if (typeof elem === 'string') {\n      elem = document.querySelectorAll(elem);\n    }\n\n    this.elements = makeArray(elem);\n    this.options = extend({}, this.options);\n\n    if (typeof options === 'function') {\n      onAlways = options;\n    } else {\n      extend(this.options, options);\n    }\n\n    if (onAlways) {\n      this.on('always', onAlways);\n    }\n\n    this.getImages();\n\n    if ($) {\n      // add jQuery Deferred object\n      this.jqDeferred = new $.Deferred();\n    } // HACK check async to allow time to bind listeners\n\n\n    var _this = this;\n\n    setTimeout(function () {\n      _this.check();\n    });\n  }\n\n  ImagesLoaded.prototype = new EventEmitter();\n  ImagesLoaded.prototype.options = {};\n\n  ImagesLoaded.prototype.getImages = function () {\n    this.images = []; // filter & find items if we have an item selector\n\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      var elem = this.elements[i]; // filter siblings\n\n      if (elem.nodeName === 'IMG') {\n        this.addImage(elem);\n      } // find children\n      // no non-element nodes, #143\n\n\n      var nodeType = elem.nodeType;\n\n      if (!nodeType || !(nodeType === 1 || nodeType === 9 || nodeType === 11)) {\n        continue;\n      }\n\n      var childElems = elem.querySelectorAll('img'); // concat childElems to filterFound array\n\n      for (var j = 0, jLen = childElems.length; j < jLen; j++) {\n        var img = childElems[j];\n        this.addImage(img);\n      }\n    }\n  };\n  /**\n   * @param {Image} img\n   */\n\n\n  ImagesLoaded.prototype.addImage = function (img) {\n    var loadingImage = new LoadingImage(img);\n    this.images.push(loadingImage);\n  };\n\n  ImagesLoaded.prototype.check = function () {\n    var _this = this;\n\n    var checkedCount = 0;\n    var length = this.images.length;\n    this.hasAnyBroken = false; // complete if no images\n\n    if (!length) {\n      this.complete();\n      return;\n    }\n\n    function onConfirm(image, message) {\n      if (_this.options.debug && hasConsole) {\n        console.log('confirm', image, message);\n      }\n\n      _this.progress(image);\n\n      checkedCount++;\n\n      if (checkedCount === length) {\n        _this.complete();\n      }\n\n      return true; // bind once\n    }\n\n    for (var i = 0; i < length; i++) {\n      var loadingImage = this.images[i];\n      loadingImage.on('confirm', onConfirm);\n      loadingImage.check();\n    }\n  };\n\n  ImagesLoaded.prototype.progress = function (image) {\n    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded; // HACK - Chrome triggers event before object properties have changed. #83\n\n    var _this = this;\n\n    setTimeout(function () {\n      _this.emit('progress', _this, image);\n\n      if (_this.jqDeferred && _this.jqDeferred.notify) {\n        _this.jqDeferred.notify(_this, image);\n      }\n    });\n  };\n\n  ImagesLoaded.prototype.complete = function () {\n    var eventName = this.hasAnyBroken ? 'fail' : 'done';\n    this.isComplete = true;\n\n    var _this = this; // HACK - another setTimeout so that confirm happens after progress\n\n\n    setTimeout(function () {\n      _this.emit(eventName, _this);\n\n      _this.emit('always', _this);\n\n      if (_this.jqDeferred) {\n        var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';\n\n        _this.jqDeferred[jqMethod](_this);\n      }\n    });\n  }; // -------------------------- jquery -------------------------- //\n\n\n  if ($) {\n    $.fn.imagesLoaded = function (options, callback) {\n      var instance = new ImagesLoaded(this, options, callback);\n      return instance.jqDeferred.promise($(this));\n    };\n  } // --------------------------  -------------------------- //\n\n\n  function LoadingImage(img) {\n    this.img = img;\n  }\n\n  LoadingImage.prototype = new EventEmitter();\n\n  LoadingImage.prototype.check = function () {\n    // first check cached any previous images that have same src\n    var resource = cache[this.img.src] || new Resource(this.img.src);\n\n    if (resource.isConfirmed) {\n      this.confirm(resource.isLoaded, 'cached was confirmed');\n      return;\n    } // If complete is true and browser supports natural sizes,\n    // try to check for image status manually.\n\n\n    if (this.img.complete && this.img.naturalWidth !== undefined) {\n      // report based on naturalWidth\n      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');\n      return;\n    } // If none of the checks above matched, simulate loading on detached element.\n\n\n    var _this = this;\n\n    resource.on('confirm', function (resrc, message) {\n      _this.confirm(resrc.isLoaded, message);\n\n      return true;\n    });\n    resource.check();\n  };\n\n  LoadingImage.prototype.confirm = function (isLoaded, message) {\n    this.isLoaded = isLoaded;\n    this.emit('confirm', this, message);\n  }; // -------------------------- Resource -------------------------- //\n  // Resource checks each src, only once\n  // separate class from LoadingImage to prevent memory leaks. See #115\n\n\n  var cache = {};\n\n  function Resource(src) {\n    this.src = src; // add to cache\n\n    cache[src] = this;\n  }\n\n  Resource.prototype = new EventEmitter();\n\n  Resource.prototype.check = function () {\n    // only trigger checking once\n    if (this.isChecked) {\n      return;\n    } // simulate loading on detached element\n\n\n    var proxyImage = new Image();\n    eventie.bind(proxyImage, 'load', this);\n    eventie.bind(proxyImage, 'error', this);\n    proxyImage.src = this.src; // set flag\n\n    this.isChecked = true;\n  }; // ----- events ----- //\n  // trigger specified handler for event type\n\n\n  Resource.prototype.handleEvent = function (event) {\n    var method = 'on' + event.type;\n\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  Resource.prototype.onload = function (event) {\n    this.confirm(true, 'onload');\n    this.unbindProxyEvents(event);\n  };\n\n  Resource.prototype.onerror = function (event) {\n    this.confirm(false, 'onerror');\n    this.unbindProxyEvents(event);\n  }; // ----- confirm ----- //\n\n\n  Resource.prototype.confirm = function (isLoaded, message) {\n    this.isConfirmed = true;\n    this.isLoaded = isLoaded;\n    this.emit('confirm', this, message);\n  };\n\n  Resource.prototype.unbindProxyEvents = function (event) {\n    eventie.unbind(event.target, 'load', this);\n    eventie.unbind(event.target, 'error', this);\n  }; // -----  ----- //\n\n\n  return ImagesLoaded;\n});","map":null,"metadata":{},"sourceType":"script"}