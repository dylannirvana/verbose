{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/FilterContainer.js\";\nimport React from \"react\";\nimport Filter from \"./Filter\";\n\nvar FilterContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FilterContainer, _React$Component);\n\n  function FilterContainer(props) {\n    var _this;\n\n    _classCallCheck(this, FilterContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterContainer).call(this, props));\n    _this.state = {\n      collapse: false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /* shouldComponentUpdate() {\n         if (!this.props.container.gridPopulated()) {\n           return false;\n       }\n       return (!this.state.reload && !this.container.getAppliedFiltersCount()) ? true : this.state.reload;\n   }*/\n  //Toggle the accordion\n\n\n  _createClass(FilterContainer, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //  if(this.props.container.gridPopulated() && this.props.container.getState().reloadFilters){\n      var FILTER_FACTORY = this.props.container.getFilterFactory();\n      return (//Display filters in an accordion form\n        Object.values(FILTER_FACTORY.getRenderedContexts()).map(function (filter) {\n          return React.createElement(Filter, {\n            key: \"accordion-\" + filter.getName(),\n            isOpen: _this2.state.collapse,\n            filter: filter,\n            container: _this2.props.container,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          });\n        })\n      );\n      /* }else{\n          return null;\n      }*/\n      // console.log(category)\n    }\n  }]);\n\n  return FilterContainer;\n}(React.Component);\n\nexport { FilterContainer as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/FilterContainer.js"],"names":["React","Filter","FilterContainer","props","state","collapse","toggle","bind","event","setState","FILTER_FACTORY","container","getFilterFactory","Object","values","getRenderedContexts","map","filter","getName","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEqBC,e;;;;;AAEjB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,yFAAMA,KAAN;AAGA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAMA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,uDAAd;AAVe;AAWlB;AAEF;;;;;;AAcC;;;;;2BACOC,K,EAAO;AAEV,WAAKC,QAAL,CAAc;AACVJ,QAAAA,QAAQ,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADZ,OAAd;AAGH;;;6BAGQ;AAAA;;AAEL;AAGI,UAAMK,cAAc,GAAG,KAAKP,KAAL,CAAWQ,SAAX,CAAqBC,gBAArB,EAAvB;AAGA,aAEI;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAcJ,cAAc,CAACK,mBAAf,EAAd,EAAoDC,GAApD,CAAwD,UAAAC,MAAM;AAAA,iBAE1D,oBAAC,MAAD;AACI,YAAA,GAAG,EAAE,eAAeA,MAAM,CAACC,OAAP,EADxB;AAEI,YAAA,MAAM,EAAE,MAAI,CAACd,KAAL,CAAWC,QAFvB;AAGI,YAAA,MAAM,EAAEY,MAHZ;AAII,YAAA,SAAS,EAAE,MAAI,CAACd,KAAL,CAAWQ,SAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF0D;AAAA,SAA9D;AAHJ;AAkBJ;;;AAIA;AAEH;;;;EAtEwCX,KAAK,CAACmB,S;;SAA9BjB,e","sourcesContent":["import React from \"react\";\nimport Filter from \"./Filter\";\n\nexport default class FilterContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            collapse: false\n        };\n\n\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n   /* shouldComponentUpdate() {\n\n\n        if (!this.props.container.gridPopulated()) {\n            return false;\n        }\n        return (!this.state.reload && !this.container.getAppliedFiltersCount()) ? true : this.state.reload;\n    }*/\n\n\n\n\n\n\n    //Toggle the accordion\n    toggle(event) {\n\n        this.setState({\n            collapse: !this.state.collapse\n        });\n    }\n\n\n    render() {\n\n        //  if(this.props.container.gridPopulated() && this.props.container.getState().reloadFilters){\n\n\n            const FILTER_FACTORY = this.props.container.getFilterFactory();\n\n\n            return (\n\n                //Display filters in an accordion form\n                Object.values(FILTER_FACTORY.getRenderedContexts()).map(filter =>\n\n                    <Filter\n                        key={\"accordion-\" + filter.getName()}\n                        isOpen={this.state.collapse}\n                        filter={filter}\n                        container={this.props.container}\n\n                    />\n                )\n\n\n            );\n\n\n        /* }else{\n            return null;\n        }*/\n\n        // console.log(category)\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}