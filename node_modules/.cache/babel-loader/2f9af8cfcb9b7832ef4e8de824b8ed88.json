{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar FILTER_LIST = ['category', 'function', 'family'];\n\nvar FilterFactory =\n/*#__PURE__*/\nfunction () {\n  function FilterFactory() {\n    var _this = this;\n\n    _classCallCheck(this, FilterFactory);\n\n    this.addNewFilter = function (filterName) {\n      var filterOptions = _this.getFilterOptions(filterName);\n\n      _this.filters[filterName] = {\n        filterName: filterName,\n        isVisible: Boolean(filterOptions.length),\n        index: FILTER_LIST[filterName],\n        filterOptions: filterOptions,\n        selectedOption: ''\n      };\n    };\n\n    this.getFilterOptions = function (filterName) {\n      var filterOptions = [];\n\n      _this.filteredProducts.forEach(function (product) {\n        var filterOption = product[filterName] === undefined ? null : product[filterName].split(\" > \")[0];\n\n        if (filterOption && filterOptions.indexOf(filterOption.toLowerCase()) === -1) {\n          filterOptions.push(filterOption.toLowerCase());\n        }\n      });\n\n      return filterOptions;\n    };\n\n    this.toggleFilterOption = function (filterName, option) {\n      if (_this.filters[filterName].selectedOption === option.toLowerCase()) {\n        _this.filters[filterName].selectedOption = \"\";\n      } else {\n        _this.filters[filterName].selectedOption = option.toLowerCase();\n      } //Toggles visibility of the other filters\n\n\n      return _this.updateVisibleFilters(filterName, option);\n    };\n\n    this.updateVisibleFilters = function () {\n      var clickedFilterName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var FILTER = _this.filters[clickedFilterName];\n\n      if (!clickedFilterName) {\n        //If no filter has been clicked, show the first filter\n        _this.iterator.current();\n\n        return _this.filterProductFeed();\n      } else if (_this.shouldSort(FILTER.filterName)) {\n        return _this.sortProducts(FILTER);\n      } else {\n        _this.iterator.goTo(clickedFilterName);\n\n        if (FILTER.selectedOption) {\n          //If an option is selected\n          _this.iterator.next();\n        }\n\n        return _this.filteredProducts;\n      }\n    };\n\n    this.getVisibleFilters = function () {\n      var result = {};\n      Object.keys(_this.filters).forEach(function (key) {\n        var FILTER = _this.filters[key];\n\n        if (FILTER.isVisible) {\n          result[key] = FILTER;\n        }\n      });\n      return Object.keys(_this.filters).length ? result : [];\n    };\n\n    this.getAllSelectedOptions = function () {\n      var selectedOptionsList = [];\n\n      var VISIBLE_FILTERS = _this.getVisibleFilters();\n\n      FILTER_LIST.forEach(function (filterName) {\n        Object.keys(VISIBLE_FILTERS).forEach(function (key) {\n          var SELECTED_OPTION = _this.filters[filterName] !== undefined ? _this.filters[filterName].selectedOption : undefined;\n\n          if (key === filterName && SELECTED_OPTION) {\n            selectedOptionsList.push({\n              name: filterName,\n              selectedOption: SELECTED_OPTION\n            });\n          }\n        });\n      });\n      return selectedOptionsList;\n    };\n\n    this.filters = {}; // List of filters, created once the product feed is parsed\n    //Iterator keeps a track of where the user is in the filter selection process, which filters are visible etc\n\n    this.iterator = {\n      index: 0,\n      isFirst: function isFirst() {\n        return _this.iterator.index === 0;\n      },\n      isLast: function isLast() {\n        return _this.iterator.index === FILTER_LIST.length - 1;\n      },\n      next: function next() {\n        if (_this.iterator.index <= FILTER_LIST.length - 1) {\n          _this.iterator.index++;\n        }\n\n        return _this.iterator.current();\n      },\n      prev: function prev() {\n        if (_this.iterator.index > 0) {\n          _this.iterator.index--;\n        }\n\n        return _this.iterator.current();\n      },\n      current: function current() {\n        if (_this.iterator.index < FILTER_LIST.length) {\n          var FILTER_NAME = FILTER_LIST[_this.iterator.index];\n\n          if (!_this.filters[FILTER_NAME]) {\n            _this.addNewFilter(FILTER_NAME);\n          }\n\n          return _this.filters[FILTER_NAME];\n        }\n\n        return false;\n      },\n      goTo: function goTo(filterName) {\n        _this.iterator.index = FILTER_LIST.indexOf(filterName); // this.iterator.index++; //Do not remove clicked filter\n        //Remove filters that follow\n\n        for (var i = _this.iterator.index + 1; i <= FILTER_LIST.length - 1; i++) {\n          var FILTER_NAME = FILTER_LIST[i];\n\n          if (_this.filters[FILTER_NAME]) {\n            delete _this.filters[FILTER_NAME];\n          }\n        }\n\n        _this.filterProductFeed();\n      }\n    };\n    this.feed = [];\n    this.filteredProducts = [];\n  }\n  /*\r\n  * Initialize Filter Factory with product feed\r\n   */\n\n\n  _createClass(FilterFactory, [{\n    key: \"init\",\n    value: function init(feed) {\n      this.feed = feed;\n      this.filteredProducts = Array.from(feed);\n      this.updateVisibleFilters();\n    }\n    /*\r\n    * Adds new filter to this.filters\r\n     */\n\n  }, {\n    key: \"filterProductFeed\",\n\n    /*\r\n    * Filters the products, based on the filter options selected\r\n     */\n    value: function filterProductFeed() {\n      var selectedOptionsList = this.getAllSelectedOptions(); //If no filters have been selected, then return the product feed itself\n\n      if (!selectedOptionsList.length) {\n        this.filteredProducts = Array.from(this.feed);\n        return this.filteredProducts;\n      }\n\n      this.filteredProducts = new Array();\n      var i = this.feed.length;\n\n      while (i--) {\n        var product = this.feed[i];\n        var j = selectedOptionsList.length;\n\n        while (j--) {\n          var filter = selectedOptionsList[j];\n\n          if (product[filter.name] !== undefined && product[filter.name].toLowerCase().indexOf(filter.selectedOption.toLowerCase()) !== -1) {\n            this.filteredProducts.push(product);\n            break;\n          }\n        }\n      }\n\n      return this.filteredProducts;\n    }\n  }, {\n    key: \"sortProducts\",\n\n    /*\r\n    * Sorts the product\r\n     */\n    value: function sortProducts(FILTER) {\n      var sortedProducts = Array.from(this.filteredProducts);\n      this.filteredProducts.forEach(function (product, index) {\n        if (product[FILTER.filterName] !== undefined && product[FILTER.filterName].toLowerCase() === FILTER.selectedOption.toLowerCase()) {\n          sortedProducts.splice(index, 1);\n          sortedProducts.unshift(product);\n        }\n      });\n      this.filteredProducts = sortedProducts;\n      return this.filteredProducts;\n    }\n  }, {\n    key: \"shouldSort\",\n\n    /*\r\n    * Determines if sorting should happen\r\n     */\n    value: function shouldSort(filterName) {\n      return FILTER_LIST[FILTER_LIST.length - 1] === filterName && FILTER_LIST.length >= 3;\n    }\n    /*\r\n    * Generates CSS classes for a given product\r\n     */\n\n  }, {\n    key: \"getCSSClasses\",\n    value: function getCSSClasses(product) {\n      var classes = '';\n      FILTER_LIST.forEach(function (filterName) {\n        if (product[filterName] !== undefined) {\n          classes += product[filterName].split(' > ')[0].replace(' ', '-') + ' ';\n        }\n      });\n      return classes.toLowerCase();\n    }\n  }, {\n    key: \"getIndexOfProduct\",\n\n    /*\r\n    * Gets the index of a product in the product feed\r\n     */\n    value: function getIndexOfProduct(product) {\n      return this.feed.indexOf(product) + 1;\n    }\n    /*\r\n    * Gets the product feed\r\n     */\n\n  }, {\n    key: \"getFeed\",\n    value: function getFeed() {\n      return this.feed;\n    }\n    /*\r\n    * Returns filtered products\r\n     */\n\n  }, {\n    key: \"getFilteredProducts\",\n    value: function getFilteredProducts() {\n      return this.filteredProducts;\n    }\n    /*\r\n    * Returns if products are available\r\n     */\n\n  }, {\n    key: \"productsAvailable\",\n    value: function productsAvailable() {\n      return Boolean(this.feed.length);\n    }\n  }]);\n\n  return FilterFactory;\n}();\n\nexport { FilterFactory as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/FilterFactory.js"],"names":["FILTER_LIST","FilterFactory","addNewFilter","filterName","filterOptions","getFilterOptions","filters","isVisible","Boolean","length","index","selectedOption","filteredProducts","forEach","product","filterOption","undefined","split","indexOf","toLowerCase","push","toggleFilterOption","option","updateVisibleFilters","clickedFilterName","filter","FILTER","iterator","current","filterProductFeed","shouldSort","sortProducts","goTo","next","getVisibleFilters","result","Object","keys","key","getAllSelectedOptions","selectedOptionsList","VISIBLE_FILTERS","SELECTED_OPTION","name","isFirst","isLast","prev","FILTER_NAME","i","feed","Array","from","j","sortedProducts","splice","unshift","classes","replace"],"mappings":";;AAAA,IAAMA,WAAW,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,CAApB;;IAGqBC,a;;;AAGjB,2BAAc;AAAA;;AAAA;;AAAA,SAsGdC,YAtGc,GAsGC,UAACC,UAAD,EAAgB;AAE3B,UAAIC,aAAa,GAAG,KAAI,CAACC,gBAAL,CAAsBF,UAAtB,CAApB;;AACA,MAAA,KAAI,CAACG,OAAL,CAAaH,UAAb,IAA2B;AACvBA,QAAAA,UAAU,EAAVA,UADuB;AAEvBI,QAAAA,SAAS,EAAEC,OAAO,CAACJ,aAAa,CAACK,MAAf,CAFK;AAGvBC,QAAAA,KAAK,EAAEV,WAAW,CAACG,UAAD,CAHK;AAIvBC,QAAAA,aAAa,EAAEA,aAJQ;AAKvBO,QAAAA,cAAc,EAAE;AALO,OAA3B;AAOH,KAhHa;;AAAA,SAsHdN,gBAtHc,GAsHK,UAACF,UAAD,EAAgB;AAE/B,UAAIC,aAAa,GAAG,EAApB;;AAEA,MAAA,KAAI,CAACQ,gBAAL,CAAsBC,OAAtB,CAA8B,UAACC,OAAD,EAAa;AAEvC,YAAMC,YAAY,GAAGD,OAAO,CAACX,UAAD,CAAP,KAAwBa,SAAxB,GAAoC,IAApC,GAA2CF,OAAO,CAACX,UAAD,CAAP,CAAoBc,KAApB,CAA0B,KAA1B,EAAiC,CAAjC,CAAhE;;AAEA,YAAIF,YAAY,IAAIX,aAAa,CAACc,OAAd,CAAsBH,YAAY,CAACI,WAAb,EAAtB,MAAsD,CAAC,CAA3E,EAA8E;AAC1Ef,UAAAA,aAAa,CAACgB,IAAd,CAAmBL,YAAY,CAACI,WAAb,EAAnB;AACH;AAEJ,OARD;;AAUA,aAAOf,aAAP;AACH,KArIa;;AAAA,SA4IdiB,kBA5Ic,GA4IO,UAAClB,UAAD,EAAamB,MAAb,EAAwB;AAEzC,UAAI,KAAI,CAAChB,OAAL,CAAaH,UAAb,EAAyBQ,cAAzB,KAA4CW,MAAM,CAACH,WAAP,EAAhD,EAAsE;AAClE,QAAA,KAAI,CAACb,OAAL,CAAaH,UAAb,EAAyBQ,cAAzB,GAA0C,EAA1C;AACH,OAFD,MAEO;AACH,QAAA,KAAI,CAACL,OAAL,CAAaH,UAAb,EAAyBQ,cAAzB,GAA0CW,MAAM,CAACH,WAAP,EAA1C;AACH,OANwC,CAQzC;;;AACA,aAAO,KAAI,CAACI,oBAAL,CAA0BpB,UAA1B,EAAsCmB,MAAtC,CAAP;AACH,KAtJa;;AAAA,SA4JdC,oBA5Jc,GA4JS,YAA4C;AAAA,UAA3CC,iBAA2C,uEAAvB,EAAuB;AAAA,UAAnBC,MAAmB,uEAAV,KAAU;AAC/D,UAAMC,MAAM,GAAG,KAAI,CAACpB,OAAL,CAAakB,iBAAb,CAAf;;AAEA,UAAI,CAACA,iBAAL,EAAwB;AAAE;AAEtB,QAAA,KAAI,CAACG,QAAL,CAAcC,OAAd;;AACA,eAAO,KAAI,CAACC,iBAAL,EAAP;AAEH,OALD,MAKO,IAAI,KAAI,CAACC,UAAL,CAAgBJ,MAAM,CAACvB,UAAvB,CAAJ,EAAwC;AAE3C,eAAO,KAAI,CAAC4B,YAAL,CAAkBL,MAAlB,CAAP;AAEH,OAJM,MAIA;AAEH,QAAA,KAAI,CAACC,QAAL,CAAcK,IAAd,CAAmBR,iBAAnB;;AAEA,YAAIE,MAAM,CAACf,cAAX,EAA2B;AAAE;AACzB,UAAA,KAAI,CAACgB,QAAL,CAAcM,IAAd;AACH;;AAED,eAAO,KAAI,CAACrB,gBAAZ;AACH;AACJ,KAlLa;;AAAA,SAwLdsB,iBAxLc,GAwLM,YAAM;AAGtB,UAAIC,MAAM,GAAG,EAAb;AAGAC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAI,CAAC/B,OAAjB,EAA0BO,OAA1B,CAAkC,UAACyB,GAAD,EAAS;AAEvC,YAAMZ,MAAM,GAAG,KAAI,CAACpB,OAAL,CAAagC,GAAb,CAAf;;AAEA,YAAIZ,MAAM,CAACnB,SAAX,EAAsB;AAClB4B,UAAAA,MAAM,CAACG,GAAD,CAAN,GAAcZ,MAAd;AACH;AACJ,OAPD;AAUA,aAAOU,MAAM,CAACC,IAAP,CAAY,KAAI,CAAC/B,OAAjB,EAA0BG,MAA1B,GAAmC0B,MAAnC,GAA4C,EAAnD;AACH,KAzMa;;AAAA,SA+MdI,qBA/Mc,GA+MU,YAAM;AAE1B,UAAIC,mBAAmB,GAAG,EAA1B;;AAEA,UAAMC,eAAe,GAAG,KAAI,CAACP,iBAAL,EAAxB;;AAEAlC,MAAAA,WAAW,CAACa,OAAZ,CAAoB,UAAAV,UAAU,EAAI;AAE9BiC,QAAAA,MAAM,CAACC,IAAP,CAAYI,eAAZ,EAA6B5B,OAA7B,CAAqC,UAAAyB,GAAG,EAAI;AAGxC,cAAMI,eAAe,GAAG,KAAI,CAACpC,OAAL,CAAaH,UAAb,MAA6Ba,SAA7B,GAAyC,KAAI,CAACV,OAAL,CAAaH,UAAb,EAAyBQ,cAAlE,GAAmFK,SAA3G;;AAEA,cAAIsB,GAAG,KAAKnC,UAAR,IAAsBuC,eAA1B,EAA2C;AACvCF,YAAAA,mBAAmB,CAACpB,IAApB,CAAyB;AACrBuB,cAAAA,IAAI,EAAExC,UADe;AAErBQ,cAAAA,cAAc,EAAE+B;AAFK,aAAzB;AAIH;AAEJ,SAZD;AAcH,OAhBD;AAkBA,aAAOF,mBAAP;AACH,KAxOa;;AAEV,SAAKlC,OAAL,GAAe,EAAf,CAFU,CAES;AAEnB;;AACA,SAAKqB,QAAL,GAAgB;AAEZjB,MAAAA,KAAK,EAAE,CAFK;AAIZkC,MAAAA,OAAO,EAAE,mBAAM;AACX,eAAO,KAAI,CAACjB,QAAL,CAAcjB,KAAd,KAAwB,CAA/B;AACH,OANW;AAQZmC,MAAAA,MAAM,EAAE,kBAAM;AACV,eAAO,KAAI,CAAClB,QAAL,CAAcjB,KAAd,KAAwBV,WAAW,CAACS,MAAZ,GAAqB,CAApD;AACH,OAVW;AAYZwB,MAAAA,IAAI,EAAE,gBAAM;AAER,YAAI,KAAI,CAACN,QAAL,CAAcjB,KAAd,IAAuBV,WAAW,CAACS,MAAZ,GAAqB,CAAhD,EAAmD;AAE/C,UAAA,KAAI,CAACkB,QAAL,CAAcjB,KAAd;AAEH;;AAED,eAAO,KAAI,CAACiB,QAAL,CAAcC,OAAd,EAAP;AACH,OArBW;AAuBZkB,MAAAA,IAAI,EAAE,gBAAM;AAER,YAAI,KAAI,CAACnB,QAAL,CAAcjB,KAAd,GAAsB,CAA1B,EAA6B;AAEzB,UAAA,KAAI,CAACiB,QAAL,CAAcjB,KAAd;AAEH;;AAED,eAAO,KAAI,CAACiB,QAAL,CAAcC,OAAd,EAAP;AACH,OAhCW;AAkCZA,MAAAA,OAAO,EAAE,mBAAM;AACX,YAAI,KAAI,CAACD,QAAL,CAAcjB,KAAd,GAAsBV,WAAW,CAACS,MAAtC,EAA8C;AAE1C,cAAMsC,WAAW,GAAG/C,WAAW,CAAC,KAAI,CAAC2B,QAAL,CAAcjB,KAAf,CAA/B;;AAEA,cAAI,CAAC,KAAI,CAACJ,OAAL,CAAayC,WAAb,CAAL,EAAgC;AAC5B,YAAA,KAAI,CAAC7C,YAAL,CAAkB6C,WAAlB;AAEH;;AAED,iBAAO,KAAI,CAACzC,OAAL,CAAayC,WAAb,CAAP;AAEH;;AAED,eAAO,KAAP;AACH,OAjDW;AAmDZf,MAAAA,IAAI,EAAE,cAAC7B,UAAD,EAAgB;AAClB,QAAA,KAAI,CAACwB,QAAL,CAAcjB,KAAd,GAAsBV,WAAW,CAACkB,OAAZ,CAAoBf,UAApB,CAAtB,CADkB,CAGlB;AAEA;;AACA,aAAK,IAAI6C,CAAC,GAAG,KAAI,CAACrB,QAAL,CAAcjB,KAAd,GAAsB,CAAnC,EAAsCsC,CAAC,IAAKhD,WAAW,CAACS,MAAZ,GAAqB,CAAjE,EAAqEuC,CAAC,EAAtE,EAA0E;AACtE,cAAMD,WAAW,GAAG/C,WAAW,CAACgD,CAAD,CAA/B;;AAEA,cAAI,KAAI,CAAC1C,OAAL,CAAayC,WAAb,CAAJ,EAA+B;AAE3B,mBAAO,KAAI,CAACzC,OAAL,CAAayC,WAAb,CAAP;AAEH;AAEJ;;AAED,QAAA,KAAI,CAAClB,iBAAL;AAGH;AAvEW,KAAhB;AA6EA,SAAKoB,IAAL,GAAY,EAAZ;AACA,SAAKrC,gBAAL,GAAwB,EAAxB;AAEH;AAGD;;;;;;;yBAGKqC,I,EAAM;AACP,WAAKA,IAAL,GAAYA,IAAZ;AACA,WAAKrC,gBAAL,GAAwBsC,KAAK,CAACC,IAAN,CAAWF,IAAX,CAAxB;AAEA,WAAK1B,oBAAL;AACH;AAGD;;;;;;;AAwIA;;;wCAGoB;AAEhB,UAAIiB,mBAAmB,GAAG,KAAKD,qBAAL,EAA1B,CAFgB,CAIhB;;AACA,UAAI,CAACC,mBAAmB,CAAC/B,MAAzB,EAAiC;AAC7B,aAAKG,gBAAL,GAAwBsC,KAAK,CAACC,IAAN,CAAW,KAAKF,IAAhB,CAAxB;AACA,eAAO,KAAKrC,gBAAZ;AACH;;AAED,WAAKA,gBAAL,GAAwB,IAAIsC,KAAJ,EAAxB;AAEA,UAAIF,CAAC,GAAG,KAAKC,IAAL,CAAUxC,MAAlB;;AAGA,aAAOuC,CAAC,EAAR,EAAY;AAER,YAAIlC,OAAO,GAAG,KAAKmC,IAAL,CAAUD,CAAV,CAAd;AACA,YAAII,CAAC,GAAGZ,mBAAmB,CAAC/B,MAA5B;;AACA,eAAM2C,CAAC,EAAP,EAAU;AACN,cAAI3B,MAAM,GAAGe,mBAAmB,CAACY,CAAD,CAAhC;;AAEA,cAAItC,OAAO,CAACW,MAAM,CAACkB,IAAR,CAAP,KAAyB3B,SAAzB,IAAsCF,OAAO,CAACW,MAAM,CAACkB,IAAR,CAAP,CAAqBxB,WAArB,GAAmCD,OAAnC,CAA2CO,MAAM,CAACd,cAAP,CAAsBQ,WAAtB,EAA3C,MAAoF,CAAC,CAA/H,EAAkI;AAE9H,iBAAKP,gBAAL,CAAsBQ,IAAtB,CAA2BN,OAA3B;AACA;AACH;AACJ;AAEJ;;AAED,aAAO,KAAKF,gBAAZ;AAEH;;;;AAGD;;;iCAGac,M,EAAQ;AAEjB,UAAI2B,cAAc,GAAGH,KAAK,CAACC,IAAN,CAAW,KAAKvC,gBAAhB,CAArB;AAEA,WAAKA,gBAAL,CAAsBC,OAAtB,CAA8B,UAACC,OAAD,EAAUJ,KAAV,EAAoB;AAE9C,YAAII,OAAO,CAACY,MAAM,CAACvB,UAAR,CAAP,KAA+Ba,SAA/B,IAA4CF,OAAO,CAACY,MAAM,CAACvB,UAAR,CAAP,CAA2BgB,WAA3B,OAA6CO,MAAM,CAACf,cAAP,CAAsBQ,WAAtB,EAA7F,EAAkI;AAE9HkC,UAAAA,cAAc,CAACC,MAAf,CAAsB5C,KAAtB,EAA6B,CAA7B;AACA2C,UAAAA,cAAc,CAACE,OAAf,CAAuBzC,OAAvB;AACH;AACJ,OAPD;AASA,WAAKF,gBAAL,GAAwByC,cAAxB;AAEA,aAAO,KAAKzC,gBAAZ;AAEH;;;;AAGD;;;+BAGWT,U,EAAY;AACnB,aAAOH,WAAW,CAACA,WAAW,CAACS,MAAZ,GAAqB,CAAtB,CAAX,KAAwCN,UAAxC,IAAsDH,WAAW,CAACS,MAAZ,IAAsB,CAAnF;AACH;AAGD;;;;;;kCAGcK,O,EAAS;AACnB,UAAI0C,OAAO,GAAG,EAAd;AAEAxD,MAAAA,WAAW,CAACa,OAAZ,CAAoB,UAAAV,UAAU,EAAI;AAC9B,YAAIW,OAAO,CAACX,UAAD,CAAP,KAAwBa,SAA5B,EAAuC;AACnCwC,UAAAA,OAAO,IAAI1C,OAAO,CAACX,UAAD,CAAP,CAAoBc,KAApB,CAA0B,KAA1B,EAAiC,CAAjC,EAAoCwC,OAApC,CAA4C,GAA5C,EAAiD,GAAjD,IAAwD,GAAnE;AACH;AAEJ,OALD;AAOA,aAAOD,OAAO,CAACrC,WAAR,EAAP;AACH;;;;AAGD;;;sCAGkBL,O,EAAS;AACvB,aAAO,KAAKmC,IAAL,CAAU/B,OAAV,CAAkBJ,OAAlB,IAA6B,CAApC;AACH;AAGD;;;;;;8BAGU;AACN,aAAO,KAAKmC,IAAZ;AACH;AAED;;;;;;0CAGsB;AAClB,aAAO,KAAKrC,gBAAZ;AACH;AAED;;;;;;wCAGoB;AAChB,aAAOJ,OAAO,CAAC,KAAKyC,IAAL,CAAUxC,MAAX,CAAd;AACH;;;;;;SAhWgBR,a","sourcesContent":["const FILTER_LIST = ['category', 'function', 'family'];\r\n\r\n\r\nexport default class FilterFactory {\r\n\r\n\r\n    constructor() {\r\n\r\n        this.filters = {}; // List of filters, created once the product feed is parsed\r\n\r\n        //Iterator keeps a track of where the user is in the filter selection process, which filters are visible etc\r\n        this.iterator = {\r\n\r\n            index: 0,\r\n\r\n            isFirst: () => {\r\n                return this.iterator.index === 0;\r\n            },\r\n\r\n            isLast: () => {\r\n                return this.iterator.index === FILTER_LIST.length - 1;\r\n            },\r\n\r\n            next: () => {\r\n\r\n                if (this.iterator.index <= FILTER_LIST.length - 1) {\r\n\r\n                    this.iterator.index++;\r\n\r\n                }\r\n\r\n                return this.iterator.current();\r\n            },\r\n\r\n            prev: () => {\r\n\r\n                if (this.iterator.index > 0) {\r\n\r\n                    this.iterator.index--;\r\n\r\n                }\r\n\r\n                return this.iterator.current();\r\n            },\r\n\r\n            current: () => {\r\n                if (this.iterator.index < FILTER_LIST.length) {\r\n\r\n                    const FILTER_NAME = FILTER_LIST[this.iterator.index];\r\n\r\n                    if (!this.filters[FILTER_NAME]) {\r\n                        this.addNewFilter(FILTER_NAME);\r\n\r\n                    }\r\n\r\n                    return this.filters[FILTER_NAME];\r\n\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            goTo: (filterName) => {\r\n                this.iterator.index = FILTER_LIST.indexOf(filterName);\r\n\r\n                // this.iterator.index++; //Do not remove clicked filter\r\n\r\n                //Remove filters that follow\r\n                for (let i = this.iterator.index + 1; i <= (FILTER_LIST.length - 1); i++) {\r\n                    const FILTER_NAME = FILTER_LIST[i];\r\n\r\n                    if (this.filters[FILTER_NAME]) {\r\n\r\n                        delete this.filters[FILTER_NAME]\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                this.filterProductFeed();\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        this.feed = [];\r\n        this.filteredProducts = [];\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    * Initialize Filter Factory with product feed\r\n     */\r\n    init(feed) {\r\n        this.feed = feed;\r\n        this.filteredProducts = Array.from(feed);\r\n\r\n        this.updateVisibleFilters()\r\n    }\r\n\r\n\r\n    /*\r\n    * Adds new filter to this.filters\r\n     */\r\n    addNewFilter = (filterName) => {\r\n\r\n        let filterOptions = this.getFilterOptions(filterName)\r\n        this.filters[filterName] = {\r\n            filterName,\r\n            isVisible: Boolean(filterOptions.length),\r\n            index: FILTER_LIST[filterName],\r\n            filterOptions: filterOptions,\r\n            selectedOption: ''\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Iterate through the products and populate filter options\r\n     */\r\n    getFilterOptions = (filterName) => {\r\n\r\n        let filterOptions = [];\r\n\r\n        this.filteredProducts.forEach((product) => {\r\n\r\n            const filterOption = product[filterName] === undefined ? null : product[filterName].split(\" > \")[0];\r\n\r\n            if (filterOption && filterOptions.indexOf(filterOption.toLowerCase()) === -1) {\r\n                filterOptions.push(filterOption.toLowerCase())\r\n            }\r\n\r\n        });\r\n\r\n        return filterOptions;\r\n    };\r\n\r\n\r\n    /*\r\n    * Marks the filter option as selected / unselected\r\n    * and then toggles visibility of the other filters\r\n     */\r\n    toggleFilterOption = (filterName, option) => {\r\n\r\n        if (this.filters[filterName].selectedOption === option.toLowerCase()) {\r\n            this.filters[filterName].selectedOption = \"\";\r\n        } else {\r\n            this.filters[filterName].selectedOption = option.toLowerCase();\r\n        }\r\n\r\n        //Toggles visibility of the other filters\r\n        return this.updateVisibleFilters(filterName, option)\r\n    }\r\n\r\n\r\n    /*\r\n    * Makes relevant filters visible; Irrelevant filters are hidden\r\n     */\r\n    updateVisibleFilters = (clickedFilterName = \"\", filter = false) => {\r\n        const FILTER = this.filters[clickedFilterName];\r\n\r\n        if (!clickedFilterName) { //If no filter has been clicked, show the first filter\r\n\r\n            this.iterator.current();\r\n            return this.filterProductFeed();\r\n\r\n        } else if (this.shouldSort(FILTER.filterName)) {\r\n\r\n            return this.sortProducts(FILTER);\r\n\r\n        } else {\r\n\r\n            this.iterator.goTo(clickedFilterName);\r\n\r\n            if (FILTER.selectedOption) { //If an option is selected\r\n                this.iterator.next();\r\n            }\r\n\r\n            return this.filteredProducts;\r\n        }\r\n    };\r\n\r\n\r\n    /*\r\n    * Returns all visible filters\r\n     */\r\n    getVisibleFilters = () => {\r\n\r\n\r\n        let result = {};\r\n\r\n\r\n        Object.keys(this.filters).forEach((key) => {\r\n\r\n            const FILTER = this.filters[key];\r\n\r\n            if (FILTER.isVisible) {\r\n                result[key] = FILTER;\r\n            }\r\n        })\r\n\r\n\r\n        return Object.keys(this.filters).length ? result : [];\r\n    }\r\n\r\n\r\n    /*\r\n    * Returns an Array of all the selected filter options\r\n     */\r\n    getAllSelectedOptions = () => {\r\n\r\n        let selectedOptionsList = [];\r\n\r\n        const VISIBLE_FILTERS = this.getVisibleFilters();\r\n\r\n        FILTER_LIST.forEach(filterName => {\r\n\r\n            Object.keys(VISIBLE_FILTERS).forEach(key => {\r\n\r\n\r\n                const SELECTED_OPTION = this.filters[filterName] !== undefined ? this.filters[filterName].selectedOption : undefined;\r\n\r\n                if (key === filterName && SELECTED_OPTION) {\r\n                    selectedOptionsList.push({\r\n                        name: filterName,\r\n                        selectedOption: SELECTED_OPTION\r\n                    });\r\n                }\r\n\r\n            })\r\n\r\n        });\r\n\r\n        return selectedOptionsList;\r\n    };\r\n\r\n\r\n    /*\r\n    * Filters the products, based on the filter options selected\r\n     */\r\n    filterProductFeed() {\r\n\r\n        let selectedOptionsList = this.getAllSelectedOptions();\r\n\r\n        //If no filters have been selected, then return the product feed itself\r\n        if (!selectedOptionsList.length) {\r\n            this.filteredProducts = Array.from(this.feed);\r\n            return this.filteredProducts;\r\n        }\r\n\r\n        this.filteredProducts = new Array();\r\n\r\n        let i = this.feed.length;\r\n\r\n\r\n        while (i--) {\r\n\r\n            let product = this.feed[i];\r\n            let j = selectedOptionsList.length;\r\n            while(j--){\r\n                let filter = selectedOptionsList[j];\r\n\r\n                if (product[filter.name] !== undefined && product[filter.name].toLowerCase().indexOf(filter.selectedOption.toLowerCase()) !== -1) {\r\n\r\n                    this.filteredProducts.push(product);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return this.filteredProducts;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n    * Sorts the product\r\n     */\r\n    sortProducts(FILTER) {\r\n\r\n        let sortedProducts = Array.from(this.filteredProducts);\r\n\r\n        this.filteredProducts.forEach((product, index) => {\r\n\r\n            if (product[FILTER.filterName] !== undefined && product[FILTER.filterName].toLowerCase() === FILTER.selectedOption.toLowerCase()) {\r\n\r\n                sortedProducts.splice(index, 1);\r\n                sortedProducts.unshift(product);\r\n            }\r\n        })\r\n\r\n        this.filteredProducts = sortedProducts;\r\n\r\n        return this.filteredProducts;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n    * Determines if sorting should happen\r\n     */\r\n    shouldSort(filterName) {\r\n        return FILTER_LIST[FILTER_LIST.length - 1] === filterName && FILTER_LIST.length >= 3;\r\n    }\r\n\r\n\r\n    /*\r\n    * Generates CSS classes for a given product\r\n     */\r\n    getCSSClasses(product) {\r\n        let classes = '';\r\n\r\n        FILTER_LIST.forEach(filterName => {\r\n            if (product[filterName] !== undefined) {\r\n                classes += product[filterName].split(' > ')[0].replace(' ', '-') + ' ';\r\n            }\r\n\r\n        })\r\n\r\n        return classes.toLowerCase();\r\n    };\r\n\r\n\r\n    /*\r\n    * Gets the index of a product in the product feed\r\n     */\r\n    getIndexOfProduct(product) {\r\n        return this.feed.indexOf(product) + 1;\r\n    }\r\n\r\n\r\n    /*\r\n    * Gets the product feed\r\n     */\r\n    getFeed() {\r\n        return this.feed;\r\n    }\r\n\r\n    /*\r\n    * Returns filtered products\r\n     */\r\n    getFilteredProducts() {\r\n        return this.filteredProducts;\r\n    }\r\n\r\n    /*\r\n    * Returns if products are available\r\n     */\r\n    productsAvailable() {\r\n        return Boolean(this.feed.length);\r\n    }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}