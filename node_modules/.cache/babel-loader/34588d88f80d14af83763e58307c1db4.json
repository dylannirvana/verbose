{"ast":null,"code":"/**\n * Packer\n * bin-packing algorithm\n */\n(function (window) {\n  'use strict'; // -------------------------- Packer -------------------------- //\n\n  function packerDefinition(Rect) {\n    /**\n     * @param {Number} width\n     * @param {Number} height\n     * @param {String} sortDirection\n     *   topLeft for vertical, leftTop for horizontal\n     */\n    function Packer(width, height, sortDirection) {\n      this.width = width || 0;\n      this.height = height || 0;\n      this.sortDirection = sortDirection || 'downwardLeftToRight';\n      this.reset();\n    }\n\n    Packer.prototype.reset = function () {\n      this.spaces = [];\n      this.newSpaces = [];\n      var initialSpace = new Rect({\n        x: 0,\n        y: 0,\n        width: this.width,\n        height: this.height\n      });\n      this.spaces.push(initialSpace); // set sorter\n\n      this.sorter = sorters[this.sortDirection] || sorters.downwardLeftToRight;\n    }; // change x and y of rect to fit with in Packer's available spaces\n\n\n    Packer.prototype.pack = function (rect) {\n      for (var i = 0, len = this.spaces.length; i < len; i++) {\n        var space = this.spaces[i];\n\n        if (space.canFit(rect)) {\n          this.placeInSpace(rect, space);\n          break;\n        }\n      }\n    };\n\n    Packer.prototype.placeInSpace = function (rect, space) {\n      // place rect in space\n      rect.x = space.x;\n      rect.y = space.y;\n      this.placed(rect);\n    }; // update spaces with placed rect\n\n\n    Packer.prototype.placed = function (rect) {\n      // update spaces\n      var revisedSpaces = [];\n\n      for (var i = 0, len = this.spaces.length; i < len; i++) {\n        var space = this.spaces[i];\n        var newSpaces = space.getMaximalFreeRects(rect); // add either the original space or the new spaces to the revised spaces\n\n        if (newSpaces) {\n          revisedSpaces.push.apply(revisedSpaces, newSpaces);\n        } else {\n          revisedSpaces.push(space);\n        }\n      }\n\n      this.spaces = revisedSpaces;\n      this.mergeSortSpaces();\n    };\n\n    Packer.prototype.mergeSortSpaces = function () {\n      // remove redundant spaces\n      Packer.mergeRects(this.spaces);\n      this.spaces.sort(this.sorter);\n    }; // add a space back\n\n\n    Packer.prototype.addSpace = function (rect) {\n      this.spaces.push(rect);\n      this.mergeSortSpaces();\n    }; // -------------------------- utility functions -------------------------- //\n\n    /**\n     * Remove redundant rectangle from array of rectangles\n     * @param {Array} rects: an array of Rects\n     * @returns {Array} rects: an array of Rects\n    **/\n\n\n    Packer.mergeRects = function (rects) {\n      for (var i = 0, len = rects.length; i < len; i++) {\n        var rect = rects[i]; // skip over this rect if it was already removed\n\n        if (!rect) {\n          continue;\n        } // clone rects we're testing, remove this rect\n\n\n        var compareRects = rects.slice(0); // do not compare with self\n\n        compareRects.splice(i, 1); // compare this rect with others\n\n        var removedCount = 0;\n\n        for (var j = 0, jLen = compareRects.length; j < jLen; j++) {\n          var compareRect = compareRects[j]; // if this rect contains another,\n          // remove that rect from test collection\n\n          var indexAdjust = i > j ? 0 : 1;\n\n          if (rect.contains(compareRect)) {\n            // console.log( 'current test rects:' + testRects.length, testRects );\n            // console.log( i, j, indexAdjust, rect, compareRect );\n            rects.splice(j + indexAdjust - removedCount, 1);\n            removedCount++;\n          }\n        }\n      }\n\n      return rects;\n    }; // -------------------------- sorters -------------------------- //\n    // functions for sorting rects in order\n\n\n    var sorters = {\n      // top down, then left to right\n      downwardLeftToRight: function downwardLeftToRight(a, b) {\n        return a.y - b.y || a.x - b.x;\n      },\n      // left to right, then top down\n      rightwardTopToBottom: function rightwardTopToBottom(a, b) {\n        return a.x - b.x || a.y - b.y;\n      }\n    }; // --------------------------  -------------------------- //\n\n    return Packer;\n  } // -------------------------- transport -------------------------- //\n\n\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = packerDefinition(require('./rect'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['./rect'], packerDefinition);\n  } else {\n    // browser global\n    var Packery = window.Packery = window.Packery || {};\n    Packery.Packer = packerDefinition(Packery.Rect);\n  }\n})(window);","map":null,"metadata":{},"sourceType":"script"}