{"ast":null,"code":"var _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/SaveGrid.js\";\n\n/*\n* This component generates a new CSV file, based on the new order of the filteredProducts tiles\n */\nimport React from 'react';\nimport { Button } from 'reactstrap';\nimport Papa from \"papaparse\";\n\nvar SaveGrid = function SaveGrid(props) {\n  //Generates a new CSV file, based on new order of the filteredProducts tiles\n  function saveHandler() {\n    var newGridHTML = props.container.getState('packery').getItemElements();\n    var newGridJSON = [];\n    newGridHTML.forEach(function (product, index) {\n      newGridJSON.push({\n        basecode: product.getAttribute('data-sku'),\n        neworder: index + 1\n      });\n    });\n    var csv = Papa.unparse(newGridJSON),\n        csvData = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    }),\n        csvURL = navigator.msSaveBlob ? navigator.msSaveBlob(csvData, 'download.csv') : window.URL.createObjectURL(csvData); //Create <a> tag, that would trigger the SAVE Dialog box, for saving the CSV\n\n    var downloadLink = document.createElement('a');\n    downloadLink.href = csvURL;\n    downloadLink.setAttribute('download', 'download.csv');\n    document.body.appendChild(downloadLink); // Required for FF\n\n    downloadLink.click();\n  }\n\n  return React.createElement(Button, {\n    color: \"primary\",\n    className: \"nav-btn\",\n    onClick: saveHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Save\");\n};\n\nexport default SaveGrid;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/SaveGrid.js"],"names":["React","Button","Papa","SaveGrid","props","saveHandler","newGridHTML","container","getState","getItemElements","newGridJSON","forEach","product","index","push","basecode","getAttribute","neworder","csv","unparse","csvData","Blob","type","csvURL","navigator","msSaveBlob","window","URL","createObjectURL","downloadLink","document","createElement","href","setAttribute","body","appendChild","click"],"mappings":";;AAAA;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAGxB;AACA,WAASC,WAAT,GAAsB;AAElB,QAAMC,WAAW,GAAGF,KAAK,CAACG,SAAN,CAAgBC,QAAhB,CAAyB,SAAzB,EAAoCC,eAApC,EAApB;AACA,QAAIC,WAAW,GAAG,EAAlB;AAEAJ,IAAAA,WAAW,CAACK,OAAZ,CAAoB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AAC1CH,MAAAA,WAAW,CAACI,IAAZ,CAAiB;AAACC,QAAAA,QAAQ,EAAEH,OAAO,CAACI,YAAR,CAAqB,UAArB,CAAX;AAA6CC,QAAAA,QAAQ,EAAGJ,KAAK,GAAG;AAAhE,OAAjB;AAEH,KAHD;AAKA,QAAMK,GAAG,GAAGhB,IAAI,CAACiB,OAAL,CAAaT,WAAb,CAAZ;AAAA,QACIU,OAAO,GAAG,IAAIC,IAAJ,CAAS,CAACH,GAAD,CAAT,EAAgB;AAACI,MAAAA,IAAI,EAAE;AAAP,KAAhB,CADd;AAAA,QAEIC,MAAM,GAAGC,SAAS,CAACC,UAAV,GAAuBD,SAAS,CAACC,UAAV,CAAqBL,OAArB,EAA8B,cAA9B,CAAvB,GAAuEM,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BR,OAA3B,CAFpF,CAVkB,CAclB;;AACA,QAAIS,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAnB;AACAF,IAAAA,YAAY,CAACG,IAAb,GAAoBT,MAApB;AACAM,IAAAA,YAAY,CAACI,YAAb,CAA0B,UAA1B,EAAsC,cAAtC;AACAH,IAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,YAA1B,EAlBkB,CAkBuB;;AACzCA,IAAAA,YAAY,CAACO,KAAb;AAGH;;AAGD,SACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,SAAS,EAAE,SAAnC;AAA8C,IAAA,OAAO,EAAE/B,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,CApCD;;AAuCA,eAAeF,QAAf","sourcesContent":["/*\n* This component generates a new CSV file, based on the new order of the filteredProducts tiles\n */\n\nimport React from 'react';\nimport {Button} from 'reactstrap';\nimport Papa from \"papaparse\";\n\n\nconst SaveGrid = (props) => {\n\n\n    //Generates a new CSV file, based on new order of the filteredProducts tiles\n    function saveHandler(){\n\n        const newGridHTML = props.container.getState('packery').getItemElements();\n        let newGridJSON = [];\n\n        newGridHTML.forEach(function (product, index) {\n            newGridJSON.push({basecode: product.getAttribute('data-sku'), neworder: (index + 1)})\n\n        })\n\n        const csv = Papa.unparse(newGridJSON),\n            csvData = new Blob([csv], {type: 'text/csv;charset=utf-8;'}),\n            csvURL = navigator.msSaveBlob ? navigator.msSaveBlob(csvData, 'download.csv') : window.URL.createObjectURL(csvData);\n\n        //Create <a> tag, that would trigger the SAVE Dialog box, for saving the CSV\n        var downloadLink = document.createElement('a');\n        downloadLink.href = csvURL;\n        downloadLink.setAttribute('download', 'download.csv');\n        document.body.appendChild(downloadLink); // Required for FF\n        downloadLink.click();\n\n\n    }\n\n\n    return (\n        <Button color=\"primary\" className={\"nav-btn\"} onClick={saveHandler}>\n            Save\n        </Button>\n\n    )\n\n}\n\n\nexport default SaveGrid;\n"]},"metadata":{},"sourceType":"module"}