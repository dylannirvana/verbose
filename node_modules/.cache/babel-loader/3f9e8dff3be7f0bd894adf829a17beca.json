{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/FileUploader/FileUploader.js\";\nimport React from 'react';\nimport { Input, InputGroup } from 'reactstrap'; // all this does is take the input file and render it to the DOM\n\nvar FileUploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  function FileUploader() {\n    _classCallCheck(this, FileUploader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FileUploader).apply(this, arguments));\n  }\n\n  _createClass(FileUploader, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"file\",\n        name: \"inputCSV\",\n        onChange: this.props.onFileUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\n\nexport default FileUploader; // refactor to parent as prop?\n// // Handler Papa.parse converts CSV to JSON\n// function uploadHandler(event) {\n//   console.log('The event is registering ' + event.target) // Easy squeezy\n//   const inventory = event.target.files[0];\n//   console.log(inventory) // The array object\n//   Papa.parse(inventory, {\n//     header: true,\n//     complete: function(results) { // Object with data. Err, meta to be handled later\n//       console.log(results)\n//       // let items = results.data; // Data to be passed to Grid, iterated over, and used by Packery, Draggabilly, and Isotope\n//       // console.log(items)\n//       const Items = results.data;\n//       console.log(Items)\n//     }\n//   })\n// }\n// // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/FileUploader/FileUploader.js"],"names":["React","Input","InputGroup","FileUploader","props","onFileUpload","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,YAAlC,C,CAEA;;IAEMC,Y;;;;;;;;;;;;;6BAGO;AACL,aACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAE,KAAF;AACI,QAAA,IAAI,EAAG,MADX;AAEI,QAAA,IAAI,EAAG,UAFX;AAGI,QAAA,QAAQ,EAAI,KAAKC,KAAL,CAAWC,YAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADJ,CADN;AAaH;;;;EAjBsBL,KAAK,CAACM,S;;AAwBjC,eAAeH,YAAf,C,CAEoB;AAEA;AACA;AACpB;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Input, InputGroup } from 'reactstrap';\n\n// all this does is take the input file and render it to the DOM\n\nclass FileUploader extends React.Component{\n\n\n    render() {\n        return (\n              <div>\n                  <InputGroup >\n                    < Input\n                        type = \"file\"\n                        name = \"inputCSV\"\n                        onChange = {this.props.onFileUpload}\n                    />\n                  </InputGroup>\n\n              </div>\n\n        )\n    }\n}\n\n\n\n\n\nexport default FileUploader;\n\n                    // refactor to parent as prop?\n\n                    // // Handler Papa.parse converts CSV to JSON\n                    // function uploadHandler(event) {\n//   console.log('The event is registering ' + event.target) // Easy squeezy\n\n//   const inventory = event.target.files[0];\n//   console.log(inventory) // The array object\n\n//   Papa.parse(inventory, {\n//     header: true,\n//     complete: function(results) { // Object with data. Err, meta to be handled later\n//       console.log(results)\n\n//       // let items = results.data; // Data to be passed to Grid, iterated over, and used by Packery, Draggabilly, and Isotope\n//       // console.log(items)\n\n//       const Items = results.data;\n//       console.log(Items)\n//     }\n//   })\n// }\n\n\n\n// // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });\n"]},"metadata":{},"sourceType":"module"}