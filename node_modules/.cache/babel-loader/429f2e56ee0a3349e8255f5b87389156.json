{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js\";\n\n/*\n* This component represents the Product Grid\n */\nimport React from 'react';\nimport Product from \"./Product\";\nimport { Row, Col, Jumbotron } from 'reactstrap';\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\nimport FileUploader from '../GridControls/FileUploader';\n\nvar ProductGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductGrid, _React$Component);\n\n  function ProductGrid() {\n    _classCallCheck(this, ProductGrid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductGrid).apply(this, arguments));\n  }\n\n  _createClass(ProductGrid, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        id: \"page-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, //Loop through the products\n      Object.values(this.props.container.getState('grid')).map(function (product) {\n        return (//Invokes and renders the Product Component\n          React.createElement(Product, {\n            key: product.sku,\n            product: product,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          })\n        );\n      }), //If there are no products uploaded via CSV, display the FileUploader component\n      !this.props.container.gridPopulated() && React.createElement(FileUploader, {\n        container: this.props.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }))));\n    } //Initialize packery on the product grid and make the Bootstrap cards draggable\n\n  }, {\n    key: \"initPackery\",\n    value: function initPackery() {\n      var component = this;\n      var dragableComponents = [];\n      var packeryInstance = new Packery('.grid', {\n        itemSelector: '.grid-item',\n        percentPosition: true,\n        gutter: 5\n      }); //Initialize instance of dragable component, which makes the products dragable\n\n      packeryInstance.getItemElements().forEach(function (itemElem) {\n        var draggie = new Draggabilly(itemElem);\n        packeryInstance.bindDraggabillyEvents(draggie);\n        dragableComponents.push(draggie);\n      }); //Update the new order of product tiles\n\n      packeryInstance.on('dragItemPositioned', function () {\n        this.getItemElements().forEach(function (element, index) {\n          var elementID = '#' + element.getAttribute('id');\n          document.querySelector(elementID + ' .neworder-label').textContent = 'New Order: ' + (index + 1);\n        }); //Adding CSS class .show-neworder-label shows the .neworder-label\n\n        document.getElementById('page').classList.add('show-neworder-label');\n      });\n      component.props.container.setState({\n        packery: packeryInstance,\n        dragableComponents: dragableComponents\n      });\n    } //Destroys existing packery instance\n\n  }, {\n    key: \"destroyPackery\",\n    value: function destroyPackery() {\n      var component = this;\n      var packeryInstance = component.props.container.getState('packery');\n\n      if (packeryInstance) {\n        //Destroy instances of dragable component, which makes the products dragable\n        component.props.container.getState('dragableComponents').forEach(function (draggie) {\n          draggie.destroy();\n        }); //Removing  CSS class .show-neworder-label hides the .neworder-label\n\n        document.getElementById('page').classList.remove('show-neworder-label'); //Destroy Packery Instance\n\n        packeryInstance.destroy();\n      }\n\n      component.props.container.setState({\n        packeryRefresh: false,\n        dragableComponents: [],\n        packery: false\n      });\n    } //This function is executed every time this component is updated\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.container.getState('packeryRefresh')) {\n        this.destroyPackery();\n        this.initPackery();\n        this.props.container.setState({\n          'packeryRefresh': false\n        });\n      }\n    }\n  }]);\n\n  return ProductGrid;\n}(React.Component);\n\nexport default ProductGrid;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js"],"names":["React","Product","Row","Col","Jumbotron","Packery","Draggabilly","FileUploader","ProductGrid","Object","values","props","container","getState","map","product","sku","gridPopulated","component","dragableComponents","packeryInstance","itemSelector","percentPosition","gutter","getItemElements","forEach","itemElem","draggie","bindDraggabillyEvents","push","on","element","index","elementID","getAttribute","document","querySelector","textContent","getElementById","classList","add","setState","packery","destroy","remove","packeryRefresh","destroyPackery","initPackery","Component"],"mappings":"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","sourcesContent":["/*\n* This component represents the Product Grid\n */\n\nimport React from 'react';\nimport Product from \"./Product\";\nimport {\n    Row,\n    Col,\n    Jumbotron\n} from 'reactstrap';\n\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\n\nimport FileUploader from '../GridControls/FileUploader';\n\n\nclass ProductGrid extends React.Component {\n\n    render() {\n\n\n        return (\n            <Jumbotron fluid={true} id={\"page-content\"}>\n                <Row className=\"grid\">\n\n\n                    <Col>\n                        {\n                            //Loop through the products\n                            Object.values(this.props.container.getState('grid')).map(product =>\n                                //Invokes and renders the Product Component\n                                <Product\n                                    key={product.sku}\n                                    product={product}\n                                />\n                            )\n\n                        }\n                        {\n                            //If there are no products uploaded via CSV, display the FileUploader component\n                            !this.props.container.gridPopulated() &&\n                            <FileUploader container={this.props.container}/>\n                        }\n                    </Col>\n\n                </Row>\n            </Jumbotron>\n        )\n    }\n\n    //Initialize packery on the product grid and make the Bootstrap cards draggable\n    initPackery() {\n\n        const component = this;\n        let dragableComponents = [];\n\n        var packeryInstance = new Packery('.grid', {\n            itemSelector: '.grid-item',\n            percentPosition: true,\n            gutter: 5\n        });\n\n        //Initialize instance of dragable component, which makes the products dragable\n        packeryInstance.getItemElements().forEach(function (itemElem) {\n            var draggie = new Draggabilly(itemElem);\n            packeryInstance.bindDraggabillyEvents(draggie);\n            dragableComponents.push(draggie);\n        });\n\n        //Update the new order of product tiles\n        packeryInstance.on( 'dragItemPositioned', function(){\n\n            this.getItemElements().forEach( function( element, index ) {\n               const elementID = '#' + element.getAttribute('id');\n               document.querySelector(elementID + ' .neworder-label').textContent = 'New Order: '+ (index+1);\n\n            });\n\n            //Adding CSS class .show-neworder-label shows the .neworder-label\n            document.getElementById('page').classList.add('show-neworder-label');\n        });\n\n        component.props.container.setState({\n            packery: packeryInstance,\n            dragableComponents: dragableComponents\n        });\n\n\n    }\n\n    //Destroys existing packery instance\n    destroyPackery() {\n\n        const component = this;\n        const packeryInstance = component.props.container.getState('packery');\n\n        if (packeryInstance) {\n            //Destroy instances of dragable component, which makes the products dragable\n            component.props.container.getState('dragableComponents').forEach(function (draggie) {\n\n                draggie.destroy();\n            });\n\n            //Removing  CSS class .show-neworder-label hides the .neworder-label\n            document.getElementById('page').classList.remove('show-neworder-label');\n\n            //Destroy Packery Instance\n            packeryInstance.destroy();\n        }\n\n\n        component.props.container.setState({\n            packeryRefresh: false,\n            dragableComponents: [],\n            packery: false\n        })\n\n\n    }\n\n\n    //This function is executed every time this component is updated\n    componentDidUpdate() {\n\n\n        if (this.props.container.getState('packeryRefresh')) {\n\n            this.destroyPackery();\n\n            this.initPackery();\n\n            this.props.container.setState({'packeryRefresh': false})\n\n        }\n\n\n    }\n\n\n}\n\nexport default ProductGrid;\n"]},"metadata":{},"sourceType":"module"}