{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar FILTER_LIST = ['category', 'function', 'family'];\n\nvar FilterFactory =\n/*#__PURE__*/\nfunction () {\n  function FilterFactory(feed, grid) {\n    var _this = this;\n\n    _classCallCheck(this, FilterFactory);\n\n    this.addNewFilter = function (filterName, isVisible) {\n      _this.filters[filterName] = {\n        filterName: filterName,\n        isVisible: isVisible,\n        index: FILTER_LIST[filterName],\n        filterOptions: _this.getFilterOptions(filterName),\n        selectedOption: ''\n      };\n    };\n\n    this.getFilterOptions = function (filterName) {\n      var filterOptions = [];\n\n      _this.filteredProducts.forEach(function (product) {\n        var filterOption = product[filterName] === undefined ? null : product[filterName].split(\" > \")[0];\n\n        if (filterOption && filterOptions.indexOf(filterOption.toLowerCase()) === -1) {\n          filterOptions.push(filterOption.toLowerCase());\n        }\n      });\n\n      return filterOptions;\n    };\n\n    this.toggleFilterOption = function (filterName, option) {\n      if (_this.filters[filterName].selectedOption === option.toLowerCase()) {\n        _this.filters[filterName].selectedOption = \"\";\n      } else {\n        _this.filters[filterName].selectedOption = option.toLowerCase();\n      } //Toggles visibility of the other filters\n\n\n      return _this.updateVisibleFilters(filterName, option);\n    };\n\n    this.updateVisibleFilters = function () {\n      var clickedFilterName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var FILTER = _this.filters[clickedFilterName];\n\n      if (!clickedFilterName) {\n        //If no filter has been clicked, show the first filter\n        _this.iterator.current();\n\n        return _this.filterProductFeed();\n      } else if (_this.shouldSort(FILTER.filterName)) {\n        return _this.sortProducts(FILTER);\n      } else {\n        _this.iterator.goTo(clickedFilterName);\n\n        if (FILTER.selectedOption) {\n          //If an option is selected\n          _this.iterator.next();\n        }\n\n        return _this.filteredProducts;\n      }\n    };\n\n    this.getVisibleFilters = function () {\n      var result = {};\n      var obj = _this.filters;\n      Object.keys(obj).forEach(function (key) {\n        var FILTER = obj[key];\n\n        if (FILTER.isVisible) {\n          result[key] = FILTER;\n        }\n      });\n      return Object.keys(obj).length ? result : [];\n    };\n\n    this.getAllSelectedOptions = function () {\n      var selectedOptionsList = [];\n\n      var VISIBLE_FILTERS = _this.getVisibleFilters();\n\n      FILTER_LIST.forEach(function (filterName) {\n        Object.keys(VISIBLE_FILTERS).forEach(function (key) {\n          var SELECTED_OPTION = _this.filters[filterName] !== undefined ? _this.filters[filterName].selectedOption : undefined;\n\n          if (key === filterName && SELECTED_OPTION) {\n            selectedOptionsList.push({\n              name: filterName,\n              selectedOption: SELECTED_OPTION\n            });\n          }\n        });\n      });\n      return selectedOptionsList;\n    };\n\n    this.getFilteredProducts = function () {\n      return _this.filteredProducts;\n    };\n\n    this.filters = {}; // List of filters, created once the product feed is parsed\n    //Iterator keeps a track of where the user is in the filter selection process, which filters are visible etc\n\n    this.iterator = {\n      index: 0,\n      isFirst: function isFirst() {\n        return _this.iterator.index === 0;\n      },\n      isLast: function isLast() {\n        return _this.iterator.index === FILTER_LIST.length - 1;\n      },\n      next: function next() {\n        if (_this.iterator.index <= FILTER_LIST.length - 1) {\n          _this.iterator.index++;\n        }\n\n        return _this.iterator.current();\n      },\n      prev: function prev() {\n        if (_this.iterator.index > 0) {\n          _this.iterator.index--;\n        }\n\n        return _this.iterator.current();\n      },\n      current: function current() {\n        if (_this.iterator.index < FILTER_LIST.length) {\n          var FILTER_NAME = FILTER_LIST[_this.iterator.index];\n\n          if (!_this.filters[FILTER_NAME]) {\n            _this.addNewFilter(FILTER_NAME, true);\n          }\n\n          return _this.filters[FILTER_NAME];\n        }\n\n        return false;\n      },\n      goTo: function goTo(filterName) {\n        _this.iterator.index = FILTER_LIST.indexOf(filterName); // this.iterator.index++; //Do not remove clicked filter\n        //Remove filters that follow\n\n        for (var i = _this.iterator.index + 1; i <= FILTER_LIST.length - 1; i++) {\n          var FILTER_NAME = FILTER_LIST[i];\n\n          if (_this.filters[FILTER_NAME]) {\n            delete _this.filters[FILTER_NAME];\n          }\n        }\n\n        _this.filterProductFeed();\n      }\n    };\n    this.feed = feed;\n    this.filteredProducts = grid;\n  }\n  /*\r\n  * Adds new filter to this.filters\r\n   */\n\n\n  _createClass(FilterFactory, [{\n    key: \"filterProductFeed\",\n\n    /*\r\n    * Filters the products, based on the filter options selected\r\n     */\n    value: function filterProductFeed() {\n      var selectedOptionsList = this.getAllSelectedOptions();\n\n      if (!selectedOptionsList.length) {\n        this.filteredProducts = Array.from(this.feed);\n        return this.filteredProducts;\n      }\n\n      this.filteredProducts = Array.from(this.feed);\n      this.filteredProducts = this.filteredProducts.filter(function (product, index) {\n        //Loop through each product in the product feed\n        var result = true;\n        selectedOptionsList.some(function (filter) {\n          //Loop through the applied filters\n          //Check if the product matches atleast one of the the selected filters\n          if (result && product[filter.name] !== undefined && product[filter.name].toLowerCase().indexOf(filter.selectedOption.toLowerCase()) !== -1) {\n            //If there is a match, return true and exit the loop\n            return false;\n          } else {\n            result = false;\n          } //If there is no match, return false and continue with the loop\n\n\n          return false;\n        });\n        return result;\n      });\n      return this.filteredProducts;\n    }\n  }, {\n    key: \"sortProducts\",\n\n    /*\r\n    * Sorts the product\r\n     */\n    value: function sortProducts(FILTER) {\n      var sortedProducts = Array.from(this.filteredProducts);\n      this.filteredProducts.forEach(function (product, index) {\n        if (product[FILTER.filterName] !== undefined && product[FILTER.filterName].toLowerCase() === FILTER.selectedOption.toLowerCase()) {\n          sortedProducts.splice(index, 1);\n          sortedProducts.unshift(product);\n        }\n      });\n      this.filteredProducts = sortedProducts;\n      return this.filteredProducts;\n    }\n  }, {\n    key: \"shouldSort\",\n\n    /*\r\n    * Determines if sorting should happen\r\n     */\n    value: function shouldSort(filterName) {\n      return FILTER_LIST[FILTER_LIST.length - 1] === filterName && FILTER_LIST.length >= 3;\n    }\n    /*\r\n    * Generates CSS classes for a given product\r\n     */\n\n  }, {\n    key: \"getCSSClasses\",\n    value: function getCSSClasses(product) {\n      var classes = '';\n      FILTER_LIST.forEach(function (filterName) {\n        if (product[filterName] !== undefined) {\n          classes += product[filterName].split(' > ')[0].replace(' ', '-') + ' ';\n        }\n      });\n      return classes.toLowerCase();\n    }\n  }, {\n    key: \"getIndexOfProduct\",\n\n    /*\r\n    * Gets the index of a product in the product feed\r\n     */\n    value: function getIndexOfProduct(product) {\n      return this.feed.indexOf(product) + 1;\n    }\n    /*\r\n    * Gets the product feed\r\n     */\n\n  }, {\n    key: \"getFeed\",\n    value: function getFeed() {\n      return this.feed;\n    }\n    /*\r\n    * Returns filtered products\r\n     */\n\n  }]);\n\n  return FilterFactory;\n}();\n\nexport { FilterFactory as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/FilterFactory.js"],"names":["FILTER_LIST","FilterFactory","feed","grid","addNewFilter","filterName","isVisible","filters","index","filterOptions","getFilterOptions","selectedOption","filteredProducts","forEach","product","filterOption","undefined","split","indexOf","toLowerCase","push","toggleFilterOption","option","updateVisibleFilters","clickedFilterName","filter","FILTER","iterator","current","filterProductFeed","shouldSort","sortProducts","goTo","next","getVisibleFilters","result","obj","Object","keys","key","length","getAllSelectedOptions","selectedOptionsList","VISIBLE_FILTERS","SELECTED_OPTION","name","getFilteredProducts","isFirst","isLast","prev","FILTER_NAME","i","Array","from","some","sortedProducts","splice","unshift","classes","replace"],"mappings":"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","sourcesContent":["const FILTER_LIST = ['category', 'function', 'family'];\r\n\r\n\r\nexport default class FilterFactory {\r\n\r\n\r\n    constructor(feed,grid) {\r\n\r\n        this.filters = {}; // List of filters, created once the product feed is parsed\r\n\r\n        //Iterator keeps a track of where the user is in the filter selection process, which filters are visible etc\r\n        this.iterator = {\r\n\r\n            index: 0,\r\n\r\n            isFirst: () => {\r\n                return this.iterator.index === 0;\r\n            },\r\n\r\n            isLast: () => {\r\n                return this.iterator.index === FILTER_LIST.length - 1;\r\n            },\r\n\r\n            next: () => {\r\n\r\n                if (this.iterator.index <= FILTER_LIST.length - 1) {\r\n\r\n                    this.iterator.index++;\r\n\r\n                }\r\n\r\n                return this.iterator.current();\r\n            },\r\n\r\n            prev: () => {\r\n\r\n                if (this.iterator.index > 0) {\r\n\r\n                    this.iterator.index--;\r\n\r\n                }\r\n\r\n                return this.iterator.current();\r\n            },\r\n\r\n            current: () => {\r\n                if (this.iterator.index < FILTER_LIST.length) {\r\n\r\n                    const FILTER_NAME = FILTER_LIST[this.iterator.index];\r\n\r\n                    if (!this.filters[FILTER_NAME]) {\r\n                        this.addNewFilter(FILTER_NAME, true);\r\n\r\n                    }\r\n\r\n                    return this.filters[FILTER_NAME];\r\n\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            goTo: (filterName) => {\r\n                this.iterator.index = FILTER_LIST.indexOf(filterName);\r\n\r\n                // this.iterator.index++; //Do not remove clicked filter\r\n\r\n                //Remove filters that follow\r\n                for (let i = this.iterator.index + 1; i <= (FILTER_LIST.length - 1); i++) {\r\n                    const FILTER_NAME = FILTER_LIST[i];\r\n\r\n                    if (this.filters[FILTER_NAME]) {\r\n\r\n                        delete this.filters[FILTER_NAME]\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                this.filterProductFeed();\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        this.feed = feed;\r\n        this.filteredProducts = grid;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Adds new filter to this.filters\r\n     */\r\n    addNewFilter = (filterName, isVisible) => {\r\n\r\n        this.filters[filterName] = {\r\n            filterName,\r\n            isVisible,\r\n            index: FILTER_LIST[filterName],\r\n            filterOptions: this.getFilterOptions(filterName),\r\n            selectedOption: ''\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /*\r\n     * Iterate through the products and populate filter options\r\n     */\r\n    getFilterOptions = (filterName) => {\r\n\r\n        let filterOptions = [];\r\n\r\n        this.filteredProducts.forEach((product) => {\r\n\r\n            const filterOption = product[filterName] === undefined ? null : product[filterName].split(\" > \")[0];\r\n\r\n            if (filterOption && filterOptions.indexOf(filterOption.toLowerCase()) === -1) {\r\n                filterOptions.push(filterOption.toLowerCase())\r\n            }\r\n\r\n        });\r\n\r\n        return filterOptions;\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Marks the filter option as selected / unselected\r\n    * and then toggles visibility of the other filters\r\n     */\r\n    toggleFilterOption = (filterName, option) => {\r\n\r\n        if (this.filters[filterName].selectedOption === option.toLowerCase()) {\r\n            this.filters[filterName].selectedOption = \"\";\r\n        } else {\r\n            this.filters[filterName].selectedOption = option.toLowerCase();\r\n        }\r\n\r\n        //Toggles visibility of the other filters\r\n        return this.updateVisibleFilters(filterName, option)\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Makes relevant filters visible; Irrelevant filters are hidden\r\n     */\r\n    updateVisibleFilters = (clickedFilterName = \"\", filter = false) => {\r\n        const FILTER = this.filters[clickedFilterName];\r\n\r\n        if (!clickedFilterName) { //If no filter has been clicked, show the first filter\r\n\r\n            this.iterator.current();\r\n            return this.filterProductFeed();\r\n\r\n        } else if (this.shouldSort(FILTER.filterName)) {\r\n\r\n            return this.sortProducts(FILTER);\r\n\r\n        } else {\r\n\r\n            this.iterator.goTo(clickedFilterName);\r\n\r\n            if (FILTER.selectedOption) { //If an option is selected\r\n                this.iterator.next();\r\n            }\r\n\r\n            return this.filteredProducts;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Returns all visible filters\r\n     */\r\n    getVisibleFilters = () => {\r\n\r\n\r\n        let result = {};\r\n        let obj = this.filters;\r\n\r\n        Object.keys(obj).forEach(function (key) {\r\n\r\n            const FILTER = obj[key];\r\n\r\n            if (FILTER.isVisible) {\r\n                result[key] = FILTER;\r\n            }\r\n        })\r\n\r\n\r\n        return Object.keys(obj).length ? result : [];\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Returns an Array of all the selected filter options\r\n     */\r\n    getAllSelectedOptions = () => {\r\n        let selectedOptionsList = [];\r\n\r\n        const VISIBLE_FILTERS = this.getVisibleFilters();\r\n\r\n        FILTER_LIST.forEach(filterName => {\r\n\r\n            Object.keys(VISIBLE_FILTERS).forEach(key => {\r\n\r\n\r\n                const SELECTED_OPTION = this.filters[filterName] !== undefined ? this.filters[filterName].selectedOption : undefined;\r\n\r\n                if (key === filterName && SELECTED_OPTION) {\r\n                    selectedOptionsList.push({\r\n                        name: filterName,\r\n                        selectedOption: SELECTED_OPTION\r\n                    });\r\n                }\r\n\r\n            })\r\n\r\n        });\r\n\r\n        return selectedOptionsList;\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Filters the products, based on the filter options selected\r\n     */\r\n    filterProductFeed() {\r\n\r\n        let selectedOptionsList = this.getAllSelectedOptions();\r\n\r\n\r\n        if (!selectedOptionsList.length) {\r\n            this.filteredProducts = Array.from(this.feed);\r\n            return this.filteredProducts;\r\n        }\r\n\r\n        this.filteredProducts = Array.from(this.feed);\r\n\r\n        this.filteredProducts = this.filteredProducts.filter(function (product, index) { //Loop through each product in the product feed\r\n            let result = true;\r\n            selectedOptionsList.some((filter) => { //Loop through the applied filters\r\n\r\n                //Check if the product matches atleast one of the the selected filters\r\n                if (result && product[filter.name] !== undefined && product[filter.name].toLowerCase().indexOf(filter.selectedOption.toLowerCase()) !== -1) {\r\n\r\n                    //If there is a match, return true and exit the loop\r\n                    return false;\r\n                } else {\r\n                    result = false;\r\n                }\r\n\r\n                //If there is no match, return false and continue with the loop\r\n                return false;\r\n            })\r\n\r\n            return result;\r\n        });\r\n\r\n        return this.filteredProducts;\r\n\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Sorts the product\r\n     */\r\n    sortProducts(FILTER) {\r\n\r\n        let sortedProducts = Array.from(this.filteredProducts);\r\n\r\n        this.filteredProducts.forEach((product, index) => {\r\n\r\n            if (product[FILTER.filterName] !== undefined && product[FILTER.filterName].toLowerCase() === FILTER.selectedOption.toLowerCase()) {\r\n\r\n                sortedProducts.splice(index, 1);\r\n                sortedProducts.unshift(product);\r\n            }\r\n        })\r\n\r\n        this.filteredProducts = sortedProducts;\r\n\r\n        return this.filteredProducts;\r\n\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Determines if sorting should happen\r\n     */\r\n    shouldSort(filterName) {\r\n        return FILTER_LIST[FILTER_LIST.length - 1] === filterName && FILTER_LIST.length >= 3;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Generates CSS classes for a given product\r\n     */\r\n    getCSSClasses(product) {\r\n        let classes = '';\r\n\r\n        FILTER_LIST.forEach(filterName => {\r\n            if (product[filterName] !== undefined) {\r\n                classes += product[filterName].split(' > ')[0].replace(' ', '-') + ' ';\r\n            }\r\n\r\n        })\r\n\r\n        return classes.toLowerCase();\r\n    };\r\n\r\n\r\n\r\n    /*\r\n    * Gets the index of a product in the product feed\r\n     */\r\n    getIndexOfProduct(product) {\r\n        return this.feed.indexOf(product) + 1;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Gets the product feed\r\n     */\r\n    getFeed(){\r\n        return this.feed;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    * Returns filtered products\r\n     */\r\n    getFilteredProducts = () =>{\r\n        return this.filteredProducts;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}