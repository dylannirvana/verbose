{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js\";\nimport React from \"react\";\nimport { Button, Collapse } from 'reactstrap';\n\nvar Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter(props) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var feed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, Filter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, props));\n\n    var COMPONENT = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.state = {\n      collapse: false,\n      name: name,\n      shouldRender: shouldRender,\n      options: [],\n      selectedOption: \"\"\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    COMPONENT.getName = function () {\n      return COMPONENT.state.name;\n    };\n\n    COMPONENT.shouldRender = function () {\n      return COMPONENT.state.shouldRender;\n    };\n\n    COMPONENT.getSelectedOption = function () {\n      return COMPONENT.state.selectedOption;\n    };\n\n    COMPONENT.getOptions = function () {\n      return COMPONENT.state.options;\n    };\n\n    COMPONENT.setSelectedOption = function (option) {\n      console.log(option);\n      COMPONENT.state.selectedOption = option;\n    };\n\n    COMPONENT.isOptionSelected = function (label) {\n      return COMPONENT.state.selectedOption.indexOf(label) == -1 ? false : true;\n    };\n\n    COMPONENT.filterClickHandler = function (event) {\n      var FILTER_FACTORY = COMPONENT.props.container.getFilterFactory();\n      var gridProducts = COMPONENT.props.container.getGridProducts();\n      COMPONENT.props.filter.setSelectedOption(event.target.textContent);\n      gridProducts = COMPONENT.props.container.getFilterFactory().filterProducts(gridProducts);\n      FILTER_FACTORY.updateContext(gridProducts);\n      COMPONENT.props.container.setState({\n        grid: COMPONENT.props.container.getFilterFactory().filterProducts(gridProducts)\n      });\n    };\n\n    feed.forEach(function (product) {\n      var filterLabel = product[COMPONENT.state.name] === undefined ? null : product[COMPONENT.state.name].split(\" \")[0];\n\n      if (filterLabel && COMPONENT.state.options.indexOf(filterLabel) == -1) {\n        COMPONENT.state.options.push(filterLabel);\n      }\n    });\n    return _this;\n  } //Toggle the accordion\n\n\n  _createClass(Filter, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        key: this.props.filterCategory + '-accordion',\n        className: \"filter-accordion\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Button, {\n        key: this.props.filterCategory + '-toggle',\n        className: \"filter-accordion-head\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.props.filter.getName()), React.createElement(Collapse, {\n        isOpen: this.state.collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, Object.values(this.props.filter.getOptions()).map(function (filterOption) {\n        return React.createElement(Button, {\n          key: _this2.props.filter.getName() + '-' + filterOption,\n          className: \"btn white-button filter-option \" + (_this2.props.filter.isOptionSelected(filterOption) ? 'active' : ''),\n          onClick: _this2.filterClickHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, filterOption);\n      })));\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\nexport { Filter as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js"],"names":["React","Button","Collapse","Filter","props","name","feed","shouldRender","COMPONENT","state","collapse","options","selectedOption","toggle","bind","getName","getSelectedOption","getOptions","setSelectedOption","option","console","log","isOptionSelected","label","indexOf","filterClickHandler","event","FILTER_FACTORY","container","getFilterFactory","gridProducts","getGridProducts","filter","target","textContent","filterProducts","updateContext","setState","grid","forEach","product","filterLabel","undefined","split","push","filterCategory","Object","values","map","filterOption","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {Button, Collapse} from 'reactstrap';\n\n\nexport default class Filter extends React.Component {\n\n    constructor(props, name = \"\", feed = [], shouldRender = false) {\n\n        super(props);\n\n        const COMPONENT = this;\n\n        this.state = {\n            collapse: false,\n            name: name,\n            shouldRender: shouldRender,\n            options: [],\n            selectedOption: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n\n        COMPONENT.getName = function () {\n            return COMPONENT.state.name;\n        };\n        COMPONENT.shouldRender = function () {\n            return COMPONENT.state.shouldRender;\n        };\n        COMPONENT.getSelectedOption = function () {\n            return COMPONENT.state.selectedOption;\n        };\n\n        COMPONENT.getOptions = function () {\n\n            return COMPONENT.state.options;\n        };\n\n        COMPONENT.setSelectedOption = function (option) {\n            console.log(option)\n            COMPONENT.state.selectedOption = option;\n        }\n\n        COMPONENT.isOptionSelected = function (label) {\n            return COMPONENT.state.selectedOption.indexOf(label) == -1 ? false : true;\n        }\n\n\n        COMPONENT.filterClickHandler = function (event) {\n            const FILTER_FACTORY = COMPONENT.props.container.getFilterFactory();\n            let gridProducts = COMPONENT.props.container.getGridProducts();\n\n            COMPONENT.props.filter.setSelectedOption(event.target.textContent);\n            gridProducts = COMPONENT.props.container.getFilterFactory().filterProducts(gridProducts)\n            FILTER_FACTORY.updateContext(gridProducts);\n\n            COMPONENT.props.container.setState({\n                grid: COMPONENT.props.container.getFilterFactory().filterProducts(gridProducts)\n            });\n        }\n\n\n        feed.forEach(function (product) {\n            const filterLabel = product[COMPONENT.state.name] === undefined ? null : product[COMPONENT.state.name].split(\" \")[0];\n\n            if (filterLabel && COMPONENT.state.options.indexOf(filterLabel) == -1) {\n\n\n                COMPONENT.state.options.push(filterLabel)\n\n\n            }\n\n        });\n\n    }\n\n\n    //Toggle the accordion\n    toggle(event) {\n\n        this.setState({\n            collapse: !this.state.collapse\n        });\n    }\n\n\n    render() {\n\n\n        return (\n            <div key={this.props.filterCategory + '-accordion'} className={\"filter-accordion\"}>\n                <Button key={this.props.filterCategory + '-toggle'} className={\"filter-accordion-head\"}\n                        onClick={this.toggle}>{this.props.filter.getName()}</Button>\n                <Collapse isOpen={this.state.collapse}>\n\n                    {\n                        Object.values(this.props.filter.getOptions()).map(filterOption =>\n\n                            <Button\n                                key={this.props.filter.getName() + '-' + filterOption}\n                                className={\"btn white-button filter-option \" + (this.props.filter.isOptionSelected(filterOption) ? 'active' : '')}\n                                onClick={this.filterClickHandler}>\n                                {filterOption}\n                            </Button>\n                        )\n                    }\n\n\n                </Collapse>\n            </div>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}