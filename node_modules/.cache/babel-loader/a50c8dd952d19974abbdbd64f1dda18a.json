{"ast":null,"code":"var _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/src/components/ProductFeed/ProductFeed.js\";\nimport React from 'react';\nimport { Input, InputGroup } from 'reactstrap';\nimport Papa from 'papaparse'; // all this does is take the input file and render it to the DOM\n\nvar ProductFeed = function ProductFeed() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"file\",\n    name: \"inputCSV\",\n    onChange: uploadHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })));\n};\n\nfunction uploadHandler(event) {\n  var inventory = event.target.files[0];\n  Papa.parse(inventory, {\n    header: true,\n    complete: function complete(results) {\n      var Items = results.data;\n    }\n  });\n} // refactor to parent as prop?\n// // Handler Papa.parse converts CSV to JSON\n// function uploadHandler(event) {\n//   console.log('The event is registering ' + event.target) // Easy squeezy\n//   const inventory = event.target.files[0];\n//   console.log(inventory) // The array object\n//   Papa.parse(inventory, {\n//     header: true,\n//     complete: function(results) { // Object with data. Err, meta to be handled later\n//       console.log(results)\n//       // let items = results.data; // Data to be passed to Grid, iterated over, and used by Packery, Draggabilly, and Isotope\n//       // console.log(items)\n//       const Items = results.data;\n//       console.log(Items)\n//     }\n//   })\n// }\n\n\nexport default ProductFeed; // // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/mern/neworder/src/components/ProductFeed/ProductFeed.js"],"names":["React","Input","InputGroup","Papa","ProductFeed","uploadHandler","event","inventory","target","files","parse","header","complete","results","Items","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,YAAlC;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,UAAxB;AAAmC,IAAA,QAAQ,EAAEC,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CARD;;AAUA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAE5B,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAlB;AAEAN,EAAAA,IAAI,CAACO,KAAL,CAAWH,SAAX,EAAsB;AACpBI,IAAAA,MAAM,EAAE,IADY;AAEpBC,IAAAA,QAAQ,EAAE,kBAASC,OAAT,EAAkB;AAC1B,UAAMC,KAAK,GAAGD,OAAO,CAACE,IAAtB;AACD;AAJmB,GAAtB;AAMD,C,CASD;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAGA,eAAeX,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Input, InputGroup } from 'reactstrap';\nimport Papa from 'papaparse';\n\n// all this does is take the input file and render it to the DOM\nconst ProductFeed = () => {\n  return (\n    <div>\n      <InputGroup>\n        <Input type=\"file\" name=\"inputCSV\" onChange={uploadHandler}/>\n      </InputGroup>\n    </div>\n  )\n}\n\nfunction uploadHandler(event) {\n\n  const inventory = event.target.files[0];\n\n  Papa.parse(inventory, {\n    header: true,\n    complete: function(results) {     \n      const Items = results.data;\n    }\n  })\n}\n\n\n\n\n\n\n\n\n// refactor to parent as prop?\n\n// // Handler Papa.parse converts CSV to JSON\n// function uploadHandler(event) {\n//   console.log('The event is registering ' + event.target) // Easy squeezy\n\n//   const inventory = event.target.files[0];\n//   console.log(inventory) // The array object\n\n//   Papa.parse(inventory, {\n//     header: true,\n//     complete: function(results) { // Object with data. Err, meta to be handled later\n//       console.log(results)\n\n//       // let items = results.data; // Data to be passed to Grid, iterated over, and used by Packery, Draggabilly, and Isotope\n//       // console.log(items)\n      \n//       const Items = results.data;\n//       console.log(Items)\n//     }\n//   })\n// }\n\n\nexport default ProductFeed;\n\n// // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });\n"]},"metadata":{},"sourceType":"module"}