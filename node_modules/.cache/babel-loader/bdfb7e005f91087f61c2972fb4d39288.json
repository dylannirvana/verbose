{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js\";\n\n/*\n* This component represents the Product Grid\n */\nimport React from 'react';\nimport Product from \"./Product\";\nimport { Row, Col, Jumbotron } from 'reactstrap';\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\n\nvar ProductGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductGrid, _React$Component);\n\n  function ProductGrid() {\n    _classCallCheck(this, ProductGrid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductGrid).apply(this, arguments));\n  }\n\n  _createClass(ProductGrid, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var FILTER_FACTORY = this.props.container.getFilterFactory();\n\n      if (FILTER_FACTORY.productsAvailable()) {\n        return React.createElement(Jumbotron, {\n          fluid: true,\n          id: \"page-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Row, {\n          className: \"grid\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(Col, {\n          className: \"product-grid\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, //Loop through the products\n        Object.values(FILTER_FACTORY.getFilteredProducts()).map(function (product) {\n          return (//Invokes and renders the Product Component\n            React.createElement(Product, {\n              key: product.sku,\n              product: product,\n              container: _this.props.container,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36\n              },\n              __self: this\n            })\n          );\n        }))));\n      } else {\n        return null;\n      }\n    } //Initialize packery on the product filteredProducts and make the Bootstrap cards draggable\n\n  }, {\n    key: \"initPackery\",\n    value: function initPackery() {\n      var component = this;\n      var dragableComponents = [];\n      var packeryInstance = new Packery('.product-grid', {\n        itemSelector: '.grid-item',\n        percentPosition: true\n      }); //Initialize instance of dragable component, which makes the products dragable\n\n      packeryInstance.getItemElements().forEach(function (itemElem) {\n        var draggie = new Draggabilly(itemElem);\n        packeryInstance.bindDraggabillyEvents(draggie);\n        dragableComponents.push(draggie);\n      });\n      component.props.container.setState({\n        packery: packeryInstance,\n        dragableComponents: dragableComponents\n      });\n    } //Destroys existing packery instance\n\n  }, {\n    key: \"destroyPackery\",\n    value: function destroyPackery() {\n      var component = this;\n      var packeryInstance = component.props.container.getState('packery');\n\n      if (packeryInstance) {\n        //Destroy instances of dragable component, which makes the products dragable\n        component.props.container.getState('dragableComponents').forEach(function (draggie) {\n          draggie.destroy();\n        }); //Destroy Packery Instance\n\n        packeryInstance.destroy();\n      }\n\n      component.props.container.setState({\n        packeryRefresh: false,\n        dragableComponents: [],\n        packery: false\n      });\n    } //This function is executed every time this component is updated\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var FILTER_FACTORY = this.props.container.getFilterFactory();\n\n      if (this.props.container.getState('packeryRefresh') && FILTER_FACTORY.productsAvailable()) {\n        this.destroyPackery();\n        this.initPackery();\n        this.props.container.setState({\n          'packeryRefresh': false\n        });\n      }\n    }\n  }]);\n\n  return ProductGrid;\n}(React.Component);\n\nexport default ProductGrid;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/ProductGrid/ProductGrid.js"],"names":["React","Product","Row","Col","Jumbotron","Packery","Draggabilly","ProductGrid","FILTER_FACTORY","props","container","getFilterFactory","productsAvailable","Object","values","getFilteredProducts","map","product","sku","component","dragableComponents","packeryInstance","itemSelector","percentPosition","getItemElements","forEach","itemElem","draggie","bindDraggabillyEvents","push","setState","packery","getState","destroy","packeryRefresh","destroyPackery","initPackery","Component"],"mappings":";;;;;;;AAAA;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SACIC,GADJ,EAEIC,GAFJ,EAGIC,SAHJ,QAIO,YAJP;AAMA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;IAKMC,W;;;;;;;;;;;;;6BAEO;AAAA;;AAEL,UAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,gBAArB,EAAvB;;AAEA,UAAGH,cAAc,CAACI,iBAAf,EAAH,EAAsC;AAClC,eACI,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAE,IAAlB;AAAwB,UAAA,EAAE,EAAE,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI,oBAAC,GAAD;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEQ;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAcN,cAAc,CAACO,mBAAf,EAAd,EAAoDC,GAApD,CAAwD,UAAAC,OAAO;AAAA,iBAC3D;AACA,gCAAC,OAAD;AACI,cAAA,GAAG,EAAEA,OAAO,CAACC,GADjB;AAEI,cAAA,OAAO,EAAED,OAFb;AAGI,cAAA,SAAS,EAAE,KAAI,CAACR,KAAL,CAAWC,SAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAF2D;AAAA,SAA/D,CAHR,CAHJ,CADJ,CADJ;AAwBH,OAzBD,MAyBK;AACD,eAAO,IAAP;AACH;AAEJ,K,CAED;;;;kCACc;AAEV,UAAMS,SAAS,GAAG,IAAlB;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AAEA,UAAIC,eAAe,GAAG,IAAIhB,OAAJ,CAAY,eAAZ,EAA6B;AAC/CiB,QAAAA,YAAY,EAAE,YADiC;AAE/CC,QAAAA,eAAe,EAAE;AAF8B,OAA7B,CAAtB,CALU,CAUV;;AACAF,MAAAA,eAAe,CAACG,eAAhB,GAAkCC,OAAlC,CAA0C,UAAUC,QAAV,EAAoB;AAC1D,YAAIC,OAAO,GAAG,IAAIrB,WAAJ,CAAgBoB,QAAhB,CAAd;AACAL,QAAAA,eAAe,CAACO,qBAAhB,CAAsCD,OAAtC;AACAP,QAAAA,kBAAkB,CAACS,IAAnB,CAAwBF,OAAxB;AACH,OAJD;AAQAR,MAAAA,SAAS,CAACV,KAAV,CAAgBC,SAAhB,CAA0BoB,QAA1B,CAAmC;AAC/BC,QAAAA,OAAO,EAAEV,eADsB;AAE/BD,QAAAA,kBAAkB,EAAEA;AAFW,OAAnC;AAMH,K,CAED;;;;qCACiB;AAEb,UAAMD,SAAS,GAAG,IAAlB;AACA,UAAME,eAAe,GAAGF,SAAS,CAACV,KAAV,CAAgBC,SAAhB,CAA0BsB,QAA1B,CAAmC,SAAnC,CAAxB;;AAEA,UAAIX,eAAJ,EAAqB;AACjB;AACAF,QAAAA,SAAS,CAACV,KAAV,CAAgBC,SAAhB,CAA0BsB,QAA1B,CAAmC,oBAAnC,EAAyDP,OAAzD,CAAiE,UAAUE,OAAV,EAAmB;AAEhFA,UAAAA,OAAO,CAACM,OAAR;AACH,SAHD,EAFiB,CASjB;;AACAZ,QAAAA,eAAe,CAACY,OAAhB;AACH;;AAGDd,MAAAA,SAAS,CAACV,KAAV,CAAgBC,SAAhB,CAA0BoB,QAA1B,CAAmC;AAC/BI,QAAAA,cAAc,EAAE,KADe;AAE/Bd,QAAAA,kBAAkB,EAAE,EAFW;AAG/BW,QAAAA,OAAO,EAAE;AAHsB,OAAnC;AAOH,K,CAGD;;;;yCACqB;AAEjB,UAAMvB,cAAc,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,gBAArB,EAAvB;;AACA,UAAI,KAAKF,KAAL,CAAWC,SAAX,CAAqBsB,QAArB,CAA8B,gBAA9B,KAAmDxB,cAAc,CAACI,iBAAf,EAAvD,EAA2F;AAEvF,aAAKuB,cAAL;AAED,aAAKC,WAAL;AAEC,aAAK3B,KAAL,CAAWC,SAAX,CAAqBoB,QAArB,CAA8B;AAAC,4BAAkB;AAAnB,SAA9B;AAEH;AAGJ;;;;EA9GqB9B,KAAK,CAACqC,S;;AAmHhC,eAAe9B,WAAf","sourcesContent":["/*\n* This component represents the Product Grid\n */\n\nimport React from 'react';\nimport Product from \"./Product\";\nimport {\n    Row,\n    Col,\n    Jumbotron\n} from 'reactstrap';\n\nimport Packery from 'packery';\nimport Draggabilly from 'draggabilly';\n\n\n\n\nclass ProductGrid extends React.Component {\n\n    render() {\n\n        const FILTER_FACTORY = this.props.container.getFilterFactory();\n\n        if(FILTER_FACTORY.productsAvailable()){\n            return (\n                <Jumbotron fluid={true} id={\"page-content\"}>\n                    <Row className=\"grid\">\n\n\n                        <Col className=\"product-grid\">\n                            {\n                                //Loop through the products\n                                Object.values(FILTER_FACTORY.getFilteredProducts()).map(product =>\n                                    //Invokes and renders the Product Component\n                                    <Product\n                                        key={product.sku}\n                                        product={product}\n                                        container={this.props.container}\n                                    />\n                                )\n\n                            }\n\n                        </Col>\n\n                    </Row>\n                </Jumbotron>\n            )\n        }else{\n            return null;\n        }\n\n    }\n\n    //Initialize packery on the product filteredProducts and make the Bootstrap cards draggable\n    initPackery() {\n\n        const component = this;\n        let dragableComponents = [];\n\n        var packeryInstance = new Packery('.product-grid', {\n            itemSelector: '.grid-item',\n            percentPosition: true\n        });\n\n        //Initialize instance of dragable component, which makes the products dragable\n        packeryInstance.getItemElements().forEach(function (itemElem) {\n            var draggie = new Draggabilly(itemElem);\n            packeryInstance.bindDraggabillyEvents(draggie);\n            dragableComponents.push(draggie);\n        });\n\n\n\n        component.props.container.setState({\n            packery: packeryInstance,\n            dragableComponents: dragableComponents\n        });\n\n\n    }\n\n    //Destroys existing packery instance\n    destroyPackery() {\n\n        const component = this;\n        const packeryInstance = component.props.container.getState('packery');\n\n        if (packeryInstance) {\n            //Destroy instances of dragable component, which makes the products dragable\n            component.props.container.getState('dragableComponents').forEach(function (draggie) {\n\n                draggie.destroy();\n            });\n\n\n\n            //Destroy Packery Instance\n            packeryInstance.destroy();\n        }\n\n\n        component.props.container.setState({\n            packeryRefresh: false,\n            dragableComponents: [],\n            packery: false\n        })\n\n\n    }\n\n\n    //This function is executed every time this component is updated\n    componentDidUpdate() {\n\n        const FILTER_FACTORY = this.props.container.getFilterFactory();\n        if (this.props.container.getState('packeryRefresh') && FILTER_FACTORY.productsAvailable()) {\n\n            this.destroyPackery();\n\n           this.initPackery();\n\n            this.props.container.setState({'packeryRefresh': false})\n\n        }\n\n\n    }\n\n\n}\n\nexport default ProductGrid;\n"]},"metadata":{},"sourceType":"module"}