{"ast":null,"code":"/*!\n * eventie v1.0.6\n * event binding helper\n *   eventie.bind( elem, 'click', myFn )\n *   eventie.unbind( elem, 'click', myFn )\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true */\n\n/*global define: false, module: false */\n(function (window) {\n  'use strict';\n\n  var docElem = document.documentElement;\n\n  var bind = function bind() {};\n\n  function getIEEvent(obj) {\n    var event = window.event; // add event.target\n\n    event.target = event.target || event.srcElement || obj;\n    return event;\n  }\n\n  if (docElem.addEventListener) {\n    bind = function bind(obj, type, fn) {\n      obj.addEventListener(type, fn, false);\n    };\n  } else if (docElem.attachEvent) {\n    bind = function bind(obj, type, fn) {\n      obj[type + fn] = fn.handleEvent ? function () {\n        var event = getIEEvent(obj);\n        fn.handleEvent.call(fn, event);\n      } : function () {\n        var event = getIEEvent(obj);\n        fn.call(obj, event);\n      };\n      obj.attachEvent(\"on\" + type, obj[type + fn]);\n    };\n  }\n\n  var unbind = function unbind() {};\n\n  if (docElem.removeEventListener) {\n    unbind = function unbind(obj, type, fn) {\n      obj.removeEventListener(type, fn, false);\n    };\n  } else if (docElem.detachEvent) {\n    unbind = function unbind(obj, type, fn) {\n      obj.detachEvent(\"on\" + type, obj[type + fn]);\n\n      try {\n        delete obj[type + fn];\n      } catch (err) {\n        // can't delete window object properties\n        obj[type + fn] = undefined;\n      }\n    };\n  }\n\n  var eventie = {\n    bind: bind,\n    unbind: unbind\n  }; // ----- module definition ----- //\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(eventie);\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = eventie;\n  } else {\n    // browser global\n    window.eventie = eventie;\n  }\n})(window);","map":null,"metadata":{},"sourceType":"script"}