{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js\";\n\n/*\n* Entry point for the App\n */\nimport React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\nimport FilterFactory from \"./components/GridControls/Filters/FilterFactory\";\nimport GridControls from \"./components/GridControls\";\nimport { Container, Jumbotron } from 'reactstrap';\nimport Spinner from './components/Spinner';\nimport FileUploader from \"./components/GridControls/FileUploader/FileUploader\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    var component = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.state = {\n      filterFactory: new FilterFactory(),\n      spinnerVisibility: 'none',\n      packeryRefresh: true,\n      /// whether packery should be refreshed\n      packery: false,\n      //Reference to the Packery Instance\n      dragableComponents: [] //Array of dragable product components\n\n    }; //Container allows the child components to manage the state of the GridOrder component\n\n    _this.container = {\n      //Functions for managing state\n      getState: function getState(state) {\n        return state !== undefined ? component.state[state] : component.state;\n      },\n      setState: function setState(state) {\n        component.setState(state);\n      },\n      initFilterFactory: function initFilterFactory(feed) {\n        component.state.filterFactory.init(feed);\n        component.forceUpdate();\n      },\n      //Indicates if the product grid has been populated with data\n      gridPopulated: function gridPopulated() {\n        return Boolean(component.state.feed.length);\n      },\n      getFilterFactory: function getFilterFactory() {\n        return component.state.filterFactory;\n      },\n      showSpinner: function showSpinner() {\n        console.log('SHOW SPINNER');\n        component.setState({\n          spinnerVisibility: 'block'\n        });\n      },\n      hideSpinner: function hideSpinner() {\n        component.setState({\n          spinnerVisibility: 'none'\n        });\n      }\n    };\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_assertThisInitialized(_this)));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        spinnerVisibility: this.state.spinnerVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Header, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        id: \"app-intro\",\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"jumbotron-heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Grid Order App\"), React.createElement(\"p\", {\n        className: \"lead text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"))), //If there are no products uploaded via CSV, display the FileUploader component\n      !this.state.filterFactory.productsAvailable() && React.createElement(FileUploader, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(GridControls, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(ProductGrid, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js"],"names":["React","Component","Header","ProductGrid","FilterFactory","GridControls","Container","Jumbotron","Spinner","FileUploader","App","props","component","state","filterFactory","spinnerVisibility","packeryRefresh","packery","dragableComponents","container","getState","undefined","setState","initFilterFactory","feed","init","forceUpdate","gridPopulated","Boolean","length","getFilterFactory","showSpinner","console","log","hideSpinner","productsAvailable"],"mappings":"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","sourcesContent":["/*\n* Entry point for the App\n */\n\nimport React, {Component} from 'react';\n\n\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\nimport FilterFactory from \"./components/GridControls/Filters/FilterFactory\";\nimport GridControls from \"./components/GridControls\";\nimport {Container, Jumbotron} from 'reactstrap';\nimport Spinner from './components/Spinner';\nimport FileUploader from \"./components/GridControls/FileUploader/FileUploader\";\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        const component = this;\n\n        this.state = {\n\n            filterFactory: new FilterFactory(),\n\n            spinnerVisibility: 'none',\n\n            packeryRefresh: true, /// whether packery should be refreshed\n            packery: false, //Reference to the Packery Instance\n            dragableComponents: [] //Array of dragable product components\n        };\n\n        //Container allows the child components to manage the state of the GridOrder component\n        this.container = {\n\n            //Functions for managing state\n            getState: function (state) {\n                return state !== undefined ? component.state[state] : component.state\n            },\n\n            setState: function (state) {\n\n                component.setState(state);\n            },\n\n            initFilterFactory(feed){\n                component.state.filterFactory.init(feed);\n                component.forceUpdate();\n\n            },\n\n\n            //Indicates if the product grid has been populated with data\n            gridPopulated: function () {\n                return Boolean(component.state.feed.length);\n            },\n\n            getFilterFactory: function () {\n\n                return component.state.filterFactory;\n            },\n\n            showSpinner: () => {\n                console.log('SHOW SPINNER')\n                component.setState({spinnerVisibility: 'block'});\n            },\n\n            hideSpinner: () => {\n                component.setState({spinnerVisibility: 'none'});\n            }\n\n\n        }\n\n        return this;\n    }\n\n\n    render() {\n\n        return (\n            <div id={\"page\"} >\n\n                <Spinner spinnerVisibility={this.state.spinnerVisibility}/>\n                <Header container={this.container}/>\n\n                <Jumbotron  id=\"app-intro\" className={\"text-center\"}>\n                    <Container>\n                        <h1 className={\"jumbotron-heading\"}>Grid Order App</h1>\n                        <p className={\"lead text-muted\"}>\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                        </p>\n                    </Container>\n                </Jumbotron>\n\n                {\n                    //If there are no products uploaded via CSV, display the FileUploader component\n                    !this.state.filterFactory.productsAvailable() &&\n                     <FileUploader container={this.container}/>\n                }\n\n                {/*Render the controls for controlling the product grid*/}\n                <GridControls container={this.container}/>\n\n                <ProductGrid container={this.container}/>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}