{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/GridControls.js\";\n\n/*\n* This component and its children, represent a collection of controls for working with the grid\n */\nimport React from \"react\";\nimport { Button, Collapse } from 'reactstrap';\nimport NewSession from \"./NewSession\";\nimport SaveGrid from \"./SaveGrid\";\nimport FilterCriteria from \"./Filters/FilterCriteria\";\nimport Accordion from \"./Accordion\";\n\nvar GridControls =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GridControls, _React$Component);\n\n  function GridControls(props) {\n    var _this;\n\n    _classCallCheck(this, GridControls);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridControls).call(this, props));\n    _this.togglePushMenu = _this.togglePushMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(GridControls, [{\n    key: \"togglePushMenu\",\n    value: function togglePushMenu() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    } //Get the filters associated with a filter criteria\n    //Example, This function returns all filters associated with the filter criteria CATEGORY\n\n  }, {\n    key: \"getFilters\",\n    value: function getFilters(filterCriteria) {\n      var feed = this.props.container.getState('feed');\n      var filterValueList = []; //Iterate over the filter critera (Example: CATEGORY, FUNCTION etc) and fetch the applicable filters for each criteria\n\n      feed.forEach(function (product) {\n        var filterValue = product[filterCriteria] === undefined ? null : product[filterCriteria].split(\" \")[0];\n\n        if (filterValue && !filterValueList.includes(filterValue.toLowerCase())) {\n          filterValueList.push(filterValue.toLowerCase());\n        }\n      });\n      return filterValueList;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"ul\", {\n        className: \"ml-auto navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        style: {\n          display: this.props.container.gridPopulated() ? '' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(NewSession, {\n        container: this.props.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"li\", {\n        style: {\n          display: this.props.container.gridPopulated() ? '' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(SaveGrid, {\n        container: this.props.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.togglePushMenu,\n        className: \"white-button btn nav-btn\",\n        style: {\n          display: this.props.container.gridPopulated() ? '' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Filters\"), React.createElement(Collapse, {\n        id: \"offcanvas-menu\",\n        isOpen: this.state.isOpen,\n        navbar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"close\",\n        onClick: this.togglePushMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Close\"), //Display filters in an accordion form\n      Object.values(FilterCriteria).map(function (filterCriteria) {\n        return React.createElement(Accordion, {\n          key: filterCriteria,\n          isOpen: _this2.state.collapse,\n          filterCriteria: filterCriteria,\n          filters: _this2.getFilters(filterCriteria),\n          container: _this2.props.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      })))));\n    }\n  }]);\n\n  return GridControls;\n}(React.Component);\n\nexport default GridControls;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/GridControls.js"],"names":["React","Button","Collapse","NewSession","SaveGrid","FilterCriteria","Accordion","GridControls","props","togglePushMenu","bind","state","isOpen","setState","filterCriteria","feed","container","getState","filterValueList","forEach","product","filterValue","undefined","split","includes","toLowerCase","push","display","gridPopulated","Object","values","map","collapse","getFilters","Component"],"mappings":"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","sourcesContent":["/*\n* This component and its children, represent a collection of controls for working with the grid\n */\n\nimport React from \"react\";\nimport {\n    Button,\n    Collapse\n\n} from 'reactstrap';\n\nimport NewSession from \"./NewSession\";\n\nimport SaveGrid from \"./SaveGrid\";\nimport FilterCriteria from \"./Filters/FilterCriteria\";\nimport Accordion from \"./Accordion\";\n\n\nclass GridControls extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.togglePushMenu = this.togglePushMenu.bind(this);\n\n\n        this.state = {\n            isOpen: false,\n\n        };\n    }\n\n    togglePushMenu() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    //Get the filters associated with a filter criteria\n    //Example, This function returns all filters associated with the filter criteria CATEGORY\n    getFilters(filterCriteria) {\n        const feed = this.props.container.getState('feed');\n        let filterValueList = [];\n\n        //Iterate over the filter critera (Example: CATEGORY, FUNCTION etc) and fetch the applicable filters for each criteria\n        feed.forEach(function (product) {\n            const filterValue = product[filterCriteria] === undefined ? null : product[filterCriteria].split(\" \")[0];\n            if (filterValue && !filterValueList.includes(filterValue.toLowerCase())) {\n                filterValueList.push(filterValue.toLowerCase())\n            }\n        });\n\n        return filterValueList;\n    };\n\n\n    render() {\n        return (\n\n            <ul className={\"ml-auto navbar-nav\"}>\n                <li style={{display: this.props.container.gridPopulated() ? '' : 'none'}}>\n\n                    {/* NewSession is a component for destryoing the current session and starting a new one*/}\n                    <NewSession container={this.props.container}/>\n\n                </li>\n                <li style={{display: this.props.container.gridPopulated() ? '' : 'none'}}>\n\n                    {/*SaveGrid is a component for generating a CSV file from the grid tiles */}\n                    <SaveGrid container={this.props.container}/>\n\n                </li>\n                <li>\n                    <Button\n                        onClick={this.togglePushMenu} className={\"white-button btn nav-btn\"}\n                        style={{display: this.props.container.gridPopulated() ? '' : 'none'}}>\n                        Filters\n                    </Button>\n\n                    <Collapse id={\"offcanvas-menu\"} isOpen={this.state.isOpen} navbar>\n                        {\n                            <div className={\"wrapper\"}>\n                                <div className={\"close\"} onClick={this.togglePushMenu}>Close</div>\n                                {\n                                    //Display filters in an accordion form\n                                    Object.values(FilterCriteria).map(filterCriteria =>\n                                        <Accordion\n                                            key={filterCriteria}\n                                            isOpen={this.state.collapse}\n                                            filterCriteria={filterCriteria}\n                                            filters={this.getFilters(filterCriteria)}\n                                            container={this.props.container}\n                                        />\n                                    )\n                                }\n                            </div>\n                        }\n                    </Collapse>\n                </li>\n\n            </ul>\n        )\n    }\n}\n\nexport default GridControls;"]},"metadata":{},"sourceType":"module"}