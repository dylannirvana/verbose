{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/mern/neworder/src/components/ProductFeed/ProductFeed.js\";\nimport React from 'react';\nimport { Input, InputGroup } from 'reactstrap';\nimport Papa from 'papaparse'; // import Grid from '../Grid';\n// all this does is take the input file and render it to the DOM\n\nvar ProductImport = function ProductImport(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"file\",\n    name: \"inputCSV\",\n    onChange: props.uploadHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  })));\n};\n\nvar Grid = function Grid(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.someValue);\n};\n\nvar ProductFeed =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductFeed, _React$Component);\n\n  function ProductFeed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProductFeed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProductFeed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      itemList: []\n    };\n\n    _this.uploadHandler = function (event) {\n      var inventory = event.target.files[0];\n      Papa.parse(inventory, {\n        header: true,\n        complete: function complete(results) {\n          var items = results.data;\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  return ProductFeed;\n}(React.Component);\n\nexport default ProductFeed; // // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/mern/neworder/src/components/ProductFeed/ProductFeed.js"],"names":["React","Input","InputGroup","Papa","ProductImport","props","uploadHandler","Grid","someValue","ProductFeed","state","itemList","event","inventory","target","files","parse","header","complete","results","items","data","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,YAAlC;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CACA;AAEA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,UAAxB;AAAmC,IAAA,QAAQ,EAAEA,KAAK,CAACC,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CARD;;AAUA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACF,KAAD;AAAA,SACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACG,SADX,CADW;AAAA,CAAb;;IAMMC,W;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;UAIRL,a,GAAgB,UAACM,KAAD,EAAW;AACzB,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAlB;AAEAZ,MAAAA,IAAI,CAACa,KAAL,CAAWH,SAAX,EAAsB;AACpBI,QAAAA,MAAM,EAAE,IADY;AAEpBC,QAAAA,QAAQ,EAAE,kBAASC,OAAT,EAAkB;AAC1B,cAAMC,KAAK,GAAGD,OAAO,CAACE,IAAtB;AACD;AAJmB,OAAtB;AAMD,K;;;;;;EAfuBrB,KAAK,CAACsB,S;;AAkBhC,eAAeb,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Input, InputGroup } from 'reactstrap';\nimport Papa from 'papaparse';\n// import Grid from '../Grid';\n\n// all this does is take the input file and render it to the DOM\nconst ProductImport = (props) => {\n  return (\n    <div>\n      <InputGroup>\n        <Input type=\"file\" name=\"inputCSV\" onChange={props.uploadHandler}/>\n      </InputGroup>\n    </div>\n  )\n}\n\nconst Grid = (props) => (\n  <div>\n      {props.someValue}\n  </div>\n)\n\nclass ProductFeed extends React.Component {\n\n  state = {\n    itemList: []\n  }\n\n  uploadHandler = (event) => {\n    const inventory = event.target.files[0];\n  \n    Papa.parse(inventory, {\n      header: true,\n      complete: function(results) {     \n        const items = results.data;\n      }\n    })\n  }\n}\n\nexport default ProductFeed;\n\n// // INITIALIZE PACKERY\n// var $grid = $('.grid').packery({\n//   itemSelector: '.grid-item',\n//   // gutter: 10,\n//   // columnWidth helps with drop positioning\n//   columnWidth: 240\n// });\n\n// // INITIALIZE DRAGGABILLY\n// $grid.find('.grid-item').each( function( i, gridItem ) {\n//   var draggie = new Draggabilly( gridItem );\n//   // bind drag events to Packery\n//   $grid.packery( 'bindDraggabillyEvents', draggie );\n// });\n\n// // // INITIALIZE ISOTOPE\n// // var $grid = $('.grid').isotope({\n// // $grid.isotope({\n// //   getSortData: {\n// //     name: '.name', // text from querySelector\n// //     category2: '.category2',\n// //     function2: '.function2',\n// //     family: '.family'\n// //     // category: '[data-category]' // value of attribute\n// //   }\n// // });\n"]},"metadata":{},"sourceType":"module"}