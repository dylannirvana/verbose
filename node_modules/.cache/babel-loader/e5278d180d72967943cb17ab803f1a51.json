{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js\";\nimport React from \"react\";\nimport { Button } from 'reactstrap';\n\nvar Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter(props) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var feed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var shouldFilterRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, Filter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, props));\n    _this.state = {\n      collapse: false,\n      name: name,\n      shouldFilterRender: shouldFilterRender,\n      filterOptions: [],\n      selectedOption: \"\"\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    /*\n    * GET METHODS -> Methods for getting instance data\n     */\n\n    _this.getFilterName = function () {\n      return _this.state.name;\n    };\n\n    _this.getAllOptions = function () {\n      return _this.state.filterOptions;\n    };\n\n    _this.getSelectedOption = function () {\n      return _this.state.selectedOption;\n    };\n\n    _this.isOptionSelected = function (filterOption) {\n      return _this.getSelectedOption().indexOf(filterOption) === -1 ? false : true;\n    };\n\n    _this.shouldFilterRender = function () {\n      return _this.state.shouldFilterRender;\n    };\n    /*\n    * SET METHODS -> Methods for setting instance data\n    */\n\n\n    _this.setSelectedOption = function (filterOption) {\n      _this.state.selectedOption = filterOption;\n    };\n    /*\n     *  Click event handler, triggered when filter button is clicked\n     */\n\n\n    _this.filterOptionClick = function (event) {\n      var FILTER_FACTORY = _this.props.container.getFilterFactory();\n\n      var FILTERED_PRODUCTS = FILTER_FACTORY.toggleFilterOption(_this.props.filterName, event.target.textContent);\n\n      _this.props.container.setState({\n        packeryRefresh: true,\n        filteredProducts: FILTERED_PRODUCTS\n      });\n    };\n\n    return _this;\n  } //Toggle the accordion\n\n\n  _createClass(Filter, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      this.setState({\n        collapse: !this.state.collapse\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //this.state = this.props.filterState;\n      return Object.values(this.props.filterOptions).map(function (filterOption) {\n        return React.createElement(Button, {\n          color: \"warning\",\n          key: _this2.props.filterName + '-' + filterOption,\n          className: \"btn filter-option \" + (_this2.props.selectedOption === filterOption ? 'active' : ''),\n          onClick: _this2.filterOptionClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, filterOption);\n      });\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\nexport { Filter as default };","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/components/GridControls/Filters/Filter.js"],"names":["React","Button","Filter","props","name","feed","shouldFilterRender","state","collapse","filterOptions","selectedOption","toggle","bind","getFilterName","getAllOptions","getSelectedOption","isOptionSelected","filterOption","indexOf","setSelectedOption","filterOptionClick","event","FILTER_FACTORY","container","getFilterFactory","FILTERED_PRODUCTS","toggleFilterOption","filterName","target","textContent","setState","packeryRefresh","filteredProducts","Object","values","map","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,MAAR,QAAqB,YAArB;;IAGqBC,M;;;;;AAEjB,kBAAYC,KAAZ,EAAqE;AAAA;;AAAA,QAAlDC,IAAkD,uEAA3C,EAA2C;AAAA,QAAvCC,IAAuC,uEAAhC,EAAgC;AAAA,QAA5BC,kBAA4B,uEAAP,KAAO;;AAAA;;AAEjE,gFAAMH,KAAN;AAGA,UAAKI,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETJ,MAAAA,IAAI,EAAEA,IAFG;AAGTE,MAAAA,kBAAkB,EAAEA,kBAHX;AAITG,MAAAA,aAAa,EAAE,EAJN;AAKTC,MAAAA,cAAc,EAAE;AALP,KAAb;AASA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,uDAAd;AAGA;;;;AAGA,UAAKC,aAAL,GAAqB;AAAA,aAAM,MAAKN,KAAL,CAAWH,IAAjB;AAAA,KAArB;;AAEA,UAAKU,aAAL,GAAqB;AAAA,aAAM,MAAKP,KAAL,CAAWE,aAAjB;AAAA,KAArB;;AAEA,UAAKM,iBAAL,GAAyB;AAAA,aAAM,MAAKR,KAAL,CAAWG,cAAjB;AAAA,KAAzB;;AAEA,UAAKM,gBAAL,GAAwB,UAACC,YAAD;AAAA,aAAkB,MAAKF,iBAAL,GAAyBG,OAAzB,CAAiCD,YAAjC,MAAmD,CAAC,CAApD,GAAwD,KAAxD,GAAgE,IAAlF;AAAA,KAAxB;;AAEA,UAAKX,kBAAL,GAA0B;AAAA,aAAM,MAAKC,KAAL,CAAWD,kBAAjB;AAAA,KAA1B;AAGA;;;;;AAGA,UAAKa,iBAAL,GAAyB,UAACF,YAAD,EAAkB;AACvC,YAAKV,KAAL,CAAWG,cAAX,GAA4BO,YAA5B;AACH,KAFD;AAKA;;;;;AAGA,UAAKG,iBAAL,GAAyB,UAACC,KAAD,EAAW;AAChC,UAAMC,cAAc,GAAG,MAAKnB,KAAL,CAAWoB,SAAX,CAAqBC,gBAArB,EAAvB;;AAGD,UAAMC,iBAAiB,GAAGH,cAAc,CAACI,kBAAf,CAAkC,MAAKvB,KAAL,CAAWwB,UAA7C,EAAyDN,KAAK,CAACO,MAAN,CAAaC,WAAtE,CAA1B;;AAGC,YAAK1B,KAAL,CAAWoB,SAAX,CAAqBO,QAArB,CAA8B;AAC1BC,QAAAA,cAAc,EAAE,IADU;AAE1BC,QAAAA,gBAAgB,EAAEP;AAFQ,OAA9B;AAIH,KAXD;;AA1CiE;AAwDpE,G,CAGD;;;;;2BACOJ,K,EAAO;AAEV,WAAKS,QAAL,CAAc;AACVtB,QAAAA,QAAQ,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADZ,OAAd;AAGH;;;6BAGQ;AAAA;;AAEL;AAEA,aAGIyB,MAAM,CAACC,MAAP,CAAc,KAAK/B,KAAL,CAAWM,aAAzB,EAAwC0B,GAAxC,CAA4C,UAAAlB,YAAY;AAAA,eAEpD,oBAAC,MAAD;AACI,UAAA,KAAK,EAAE,SADX;AAEI,UAAA,GAAG,EAAE,MAAI,CAACd,KAAL,CAAWwB,UAAX,GAAwB,GAAxB,GAA8BV,YAFvC;AAGI,UAAA,SAAS,EAAE,wBAAwB,MAAI,CAACd,KAAL,CAAWO,cAAX,KAA8BO,YAA9B,GAA6C,QAA7C,GAAwD,EAAhF,CAHf;AAII,UAAA,OAAO,EAAE,MAAI,CAACG,iBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKKH,YALL,CAFoD;AAAA,OAAxD,CAHJ;AAgBH;;;;EA1F+BjB,KAAK,CAACoC,S;;SAArBlC,M","sourcesContent":["import React from \"react\";\n\nimport {Button} from 'reactstrap';\n\n\nexport default class Filter extends React.Component {\n\n    constructor(props, name = \"\", feed = [], shouldFilterRender = false) {\n\n        super(props);\n\n\n        this.state = {\n            collapse: false,\n            name: name,\n            shouldFilterRender: shouldFilterRender,\n            filterOptions: [],\n            selectedOption: \"\"\n        };\n\n\n        this.toggle = this.toggle.bind(this);\n\n\n        /*\n        * GET METHODS -> Methods for getting instance data\n         */\n        this.getFilterName = () => this.state.name;\n\n        this.getAllOptions = () => this.state.filterOptions;\n\n        this.getSelectedOption = () => this.state.selectedOption\n\n        this.isOptionSelected = (filterOption) => this.getSelectedOption().indexOf(filterOption) === -1 ? false : true;\n\n        this.shouldFilterRender = () => this.state.shouldFilterRender;\n\n\n        /*\n        * SET METHODS -> Methods for setting instance data\n        */\n        this.setSelectedOption = (filterOption) => {\n            this.state.selectedOption = filterOption\n        };\n\n\n        /*\n         *  Click event handler, triggered when filter button is clicked\n         */\n        this.filterOptionClick = (event) => {\n            const FILTER_FACTORY = this.props.container.getFilterFactory();\n\n\n           const FILTERED_PRODUCTS = FILTER_FACTORY.toggleFilterOption(this.props.filterName, event.target.textContent);\n\n\n            this.props.container.setState({\n                packeryRefresh: true,\n                filteredProducts: FILTERED_PRODUCTS\n            });\n        }\n\n\n    }\n\n\n    //Toggle the accordion\n    toggle(event) {\n\n        this.setState({\n            collapse: !this.state.collapse\n        });\n    }\n\n\n    render() {\n\n        //this.state = this.props.filterState;\n\n        return (\n\n\n            Object.values(this.props.filterOptions).map(filterOption =>\n\n                <Button\n                    color={\"warning\"}\n                    key={this.props.filterName + '-' + filterOption}\n                    className={\"btn filter-option \" + (this.props.selectedOption === filterOption ? 'active' : '')}\n                    onClick={this.filterOptionClick}>\n                    {filterOption}\n                </Button>\n            )\n\n\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}