{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js\";\n\n/*\n* Entry point for the App\n */\nimport React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\nimport FilterFactory from \"./components/GridControls/Filters/FilterFactory\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    var component = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.state = {\n      feed: [],\n      //The  parsed JSON obtained from PapaParse\n      grid: [],\n      // filtered grid\n      filterFactory: new FilterFactory(),\n      packeryRefresh: false,\n      /// whether packery should be refreshed\n      packery: false,\n      //Reference to the Packery Instance\n      dragableComponents: [] //Array of dragable product components\n\n    }; //Container allows the child components to manage the state of the GridOrder component\n\n    _this.container = {\n      //Functions for managing state\n      getState: function getState(state) {\n        return state !== undefined ? component.state[state] : component.state;\n      },\n      setState: function setState(state) {\n        component.setState(state);\n      },\n      getFeed: function getFeed() {\n        return component.state.feed;\n      },\n      getGridProducts: function getGridProducts() {\n        return component.state.grid;\n      },\n      update: function update() {\n        component.forceUpdate();\n      },\n      //Indicates if the grid has been populated with data\n      gridPopulated: function gridPopulated() {\n        return Boolean(component.state.feed.length);\n      },\n      getFilterFactory: function getFilterFactory() {\n        return component.state.filterFactory;\n      },\n      initFilters: function initFilters() {\n        component.state.filterFactory.updateContext(component.state.feed);\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"page\",\n        className: !this.container.getState('feed').length ? 'no-grid' : 'product-grid-loaded',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Header, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(ProductGrid, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js"],"names":["React","Component","Header","ProductGrid","FilterFactory","App","props","component","state","feed","grid","filterFactory","packeryRefresh","packery","dragableComponents","container","getState","undefined","setState","getFeed","getGridProducts","update","forceUpdate","gridPopulated","Boolean","length","getFilterFactory","initFilters","updateContext"],"mappings":";;;;;;;;AAAA;;;AAIA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAGA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAO,YAAP;AACA,OAAOC,aAAP,MAA0B,iDAA1B;;IAGMC,G;;;;;AAEF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AACA,QAAMC,SAAS,wDAAf;;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AACC;AACVC,MAAAA,IAAI,EAAE,EAFG;AAEC;AACVC,MAAAA,aAAa,EAAE,IAAIP,aAAJ,EAHN;AAMTQ,MAAAA,cAAc,EAAE,KANP;AAMc;AACvBC,MAAAA,OAAO,EAAE,KAPA;AAOO;AAChBC,MAAAA,kBAAkB,EAAE,EARX,CAQc;;AARd,KAAb,CAJe,CAef;;AACA,UAAKC,SAAL,GAAiB;AAEb;AACAC,MAAAA,QAAQ,EAAE,kBAAUR,KAAV,EAAiB;AACvB,eAAOA,KAAK,KAAKS,SAAV,GAAsBV,SAAS,CAACC,KAAV,CAAgBA,KAAhB,CAAtB,GAA+CD,SAAS,CAACC,KAAhE;AACH,OALY;AAObU,MAAAA,QAAQ,EAAE,kBAAUV,KAAV,EAAiB;AACvBD,QAAAA,SAAS,CAACW,QAAV,CAAmBV,KAAnB;AACH,OATY;AAWbW,MAAAA,OAAO,EAAE,mBAAU;AACf,eAAOZ,SAAS,CAACC,KAAV,CAAgBC,IAAvB;AACH,OAbY;AAebW,MAAAA,eAAe,EAAE,2BAAU;AACvB,eAAOb,SAAS,CAACC,KAAV,CAAgBE,IAAvB;AACH,OAjBY;AAmBbW,MAAAA,MAAM,EAAE,kBAAW;AACfd,QAAAA,SAAS,CAACe,WAAV;AACH,OArBY;AAuBb;AACAC,MAAAA,aAAa,EAAE,yBAAY;AACvB,eAAOC,OAAO,CAACjB,SAAS,CAACC,KAAV,CAAgBC,IAAhB,CAAqBgB,MAAtB,CAAd;AACH,OA1BY;AA4BbC,MAAAA,gBAAgB,EAAE,4BAAY;AAC1B,eAAOnB,SAAS,CAACC,KAAV,CAAgBG,aAAvB;AACH,OA9BY;AAgCbgB,MAAAA,WAAW,EAAE,uBAAY;AACrBpB,QAAAA,SAAS,CAACC,KAAV,CAAgBG,aAAhB,CAA8BiB,aAA9B,CAA4CrB,SAAS,CAACC,KAAV,CAAgBC,IAA5D;AACH;AAlCY,KAAjB;AAhBe;AAsDlB;;;;6BAGQ;AAEL,aACI;AAAK,QAAA,EAAE,EAAE,MAAT;AAAiB,QAAA,SAAS,EAAE,CAAC,KAAKM,SAAL,CAAeC,QAAf,CAAwB,MAAxB,EAAgCS,MAAjC,GAA0C,SAA1C,GAAsD,qBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,KAAKV,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE,KAAKA,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOH;;;;EApEad,S;;AAuElB,eAAeI,GAAf","sourcesContent":["/*\n* Entry point for the App\n */\n\nimport React, {Component} from 'react';\n\n\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\nimport FilterFactory from \"./components/GridControls/Filters/FilterFactory\";\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        const component = this;\n\n        this.state = {\n            feed: [], //The  parsed JSON obtained from PapaParse\n            grid: [], // filtered grid\n            filterFactory: new FilterFactory(),\n\n\n            packeryRefresh: false, /// whether packery should be refreshed\n            packery: false, //Reference to the Packery Instance\n            dragableComponents: [] //Array of dragable product components\n        };\n\n        //Container allows the child components to manage the state of the GridOrder component\n        this.container = {\n\n            //Functions for managing state\n            getState: function (state) {\n                return state !== undefined ? component.state[state] : component.state\n            },\n\n            setState: function (state) {\n                component.setState(state)\n            },\n\n            getFeed: function(){\n                return component.state.feed;\n            },\n\n            getGridProducts: function(){\n                return component.state.grid;\n            },\n\n            update: function (){\n                component.forceUpdate();\n            },\n\n            //Indicates if the grid has been populated with data\n            gridPopulated: function () {\n                return Boolean(component.state.feed.length);\n            },\n\n            getFilterFactory: function () {\n                return component.state.filterFactory;\n            },\n\n            initFilters: function () {\n                component.state.filterFactory.updateContext(component.state.feed);\n            }\n\n\n        }\n    }\n\n\n    render() {\n\n        return (\n            <div id={\"page\"} className={!this.container.getState('feed').length ? 'no-grid' : 'product-grid-loaded'}>\n\n                <Header container={this.container}/>\n                <ProductGrid container={this.container}/>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}