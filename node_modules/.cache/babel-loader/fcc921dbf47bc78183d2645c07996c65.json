{"ast":null,"code":"import _classCallCheck from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/uxdev/Documents/code/gridOrder/react/neworder/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js\";\n\n/*\n* Entry point for the App\n */\nimport React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    var component = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.state = {\n      feed: [],\n      //The  parsed JSON obtained from PapaParse\n      grid: [],\n      // filtered grid\n      appliedFilters: [],\n      //Filters applied by the user\n      packeryRefresh: false,\n      /// whether packery should be refreshed\n      packery: false,\n      //Reference to the Packery Instance\n      dragableComponents: [] //Array of dragable product components\n\n    }; //Container allows the child components to manage the state of the GridOrder component\n\n    _this.container = {\n      //Functions for managing state\n      getState: function getState(state) {\n        return state !== undefined ? component.state[state] : component.state;\n      },\n      setState: function setState(state) {\n        component.setState(state);\n      },\n      //Indicates if the grid has been populated with data\n      gridPopulated: function gridPopulated() {\n        return Boolean(component.state.feed.length);\n      },\n      //Functions for managing filters\n      addFilter: function addFilter(criteria, label) {\n        component.state.appliedFilters.push({\n          'label': label,\n          'criteria': criteria\n        });\n        return component.state.appliedFilters;\n      },\n      removeFilter: function removeFilter(filterLabel) {\n        return component.state.appliedFilters.filter(function (filter) {\n          return filter.label !== filterLabel;\n        });\n      },\n      getAppliedFilters: function getAppliedFilters() {\n        return component.state.appliedFilters;\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"page\",\n        className: !this.container.getState('feed').length ? 'no-grid' : 'product-grid-loaded',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Header, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(ProductGrid, {\n        container: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/uxdev/Documents/code/gridOrder/react/neworder/src/App.js"],"names":["React","Component","Header","ProductGrid","App","props","component","state","feed","grid","appliedFilters","packeryRefresh","packery","dragableComponents","container","getState","undefined","setState","gridPopulated","Boolean","length","addFilter","criteria","label","push","removeFilter","filterLabel","filter","getAppliedFilters"],"mappings":";;;;;;;;AAAA;;;AAIA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAGA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAO,YAAP;;IAEMC,G;;;;;AAEF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AACA,QAAMC,SAAS,wDAAf;;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AACC;AACVC,MAAAA,IAAI,EAAE,EAFG;AAEC;AAEVC,MAAAA,cAAc,EAAE,EAJP;AAIW;AAEpBC,MAAAA,cAAc,EAAE,KANP;AAMc;AACvBC,MAAAA,OAAO,EAAE,KAPA;AAOO;AAChBC,MAAAA,kBAAkB,EAAE,EARX,CAQc;;AARd,KAAb,CAJe,CAef;;AACA,UAAKC,SAAL,GAAiB;AAEb;AACAC,MAAAA,QAAQ,EAAE,kBAAUR,KAAV,EAAiB;AACvB,eAAOA,KAAK,KAAKS,SAAV,GAAsBV,SAAS,CAACC,KAAV,CAAgBA,KAAhB,CAAtB,GAA+CD,SAAS,CAACC,KAAhE;AACH,OALY;AAObU,MAAAA,QAAQ,EAAE,kBAAUV,KAAV,EAAiB;AACvBD,QAAAA,SAAS,CAACW,QAAV,CAAmBV,KAAnB;AACH,OATY;AAWb;AACAW,MAAAA,aAAa,EAAE,yBAAU;AACrB,eAAOC,OAAO,CAACb,SAAS,CAACC,KAAV,CAAgBC,IAAhB,CAAqBY,MAAtB,CAAd;AACH,OAdY;AAgBb;AACAC,MAAAA,SAAS,EAAE,mBAASC,QAAT,EAAkBC,KAAlB,EAAwB;AAC/BjB,QAAAA,SAAS,CAACC,KAAV,CAAgBG,cAAhB,CAA+Bc,IAA/B,CAAoC;AAAC,mBAAQD,KAAT;AAAe,sBAAYD;AAA3B,SAApC;AACA,eAAOhB,SAAS,CAACC,KAAV,CAAgBG,cAAvB;AACH,OApBY;AAqBbe,MAAAA,YAAY,EAAE,sBAASC,WAAT,EAAqB;AAC/B,eAAOpB,SAAS,CAACC,KAAV,CAAgBG,cAAhB,CAA+BiB,MAA/B,CAAsC,UAASA,MAAT,EAAgB;AACzD,iBAAOA,MAAM,CAACJ,KAAP,KAAiBG,WAAxB;AACH,SAFM,CAAP;AAGH,OAzBY;AA0BbE,MAAAA,iBAAiB,EAAC,6BAAU;AACxB,eAAOtB,SAAS,CAACC,KAAV,CAAgBG,cAAvB;AACH;AA5BY,KAAjB;AAhBe;AAgDlB;;;;6BAGQ;AAEL,aACI;AAAK,QAAA,EAAE,EAAE,MAAT;AAAiB,QAAA,SAAS,EAAE,CAAC,KAAKI,SAAL,CAAeC,QAAf,CAAwB,MAAxB,EAAgCK,MAAjC,GAA0C,SAA1C,GAAsD,qBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,KAAKN,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE,KAAKA,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOH;;;;EA9Dab,S;;AAiElB,eAAeG,GAAf","sourcesContent":["/*\n* Entry point for the App\n */\n\nimport React, {Component} from 'react';\n\n\nimport Header from './components/Header/Header';\nimport ProductGrid from './components/ProductGrid/ProductGrid';\nimport './App.scss';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        const component = this;\n\n        this.state = {\n            feed: [], //The  parsed JSON obtained from PapaParse\n            grid: [], // filtered grid\n\n            appliedFilters: [], //Filters applied by the user\n\n            packeryRefresh: false, /// whether packery should be refreshed\n            packery: false, //Reference to the Packery Instance\n            dragableComponents: [] //Array of dragable product components\n        };\n\n        //Container allows the child components to manage the state of the GridOrder component\n        this.container = {\n\n            //Functions for managing state\n            getState: function (state) {\n                return state !== undefined ? component.state[state] : component.state\n            },\n\n            setState: function (state) {\n                component.setState(state)\n            },\n\n            //Indicates if the grid has been populated with data\n            gridPopulated: function(){\n                return Boolean(component.state.feed.length);\n            },\n\n            //Functions for managing filters\n            addFilter: function(criteria,label){\n                component.state.appliedFilters.push({'label':label,'criteria': criteria});\n                return component.state.appliedFilters;\n            },\n            removeFilter: function(filterLabel){\n                return component.state.appliedFilters.filter(function(filter){\n                    return filter.label !== filterLabel;\n                })\n            },\n            getAppliedFilters:function(){\n                return component.state.appliedFilters;\n            }\n\n\n        }\n    }\n\n\n    render() {\n\n        return (\n            <div id={\"page\"} className={!this.container.getState('feed').length ? 'no-grid' : 'product-grid-loaded'}>\n\n                <Header container={this.container}/>\n                <ProductGrid container={this.container}/>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}